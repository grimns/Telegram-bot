import json
import os
import logging
import re
from threading import Thread
from flask import Flask

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, LabeledPrice
from telegram.ext import (Application, CommandHandler, CallbackQueryHandler,
                          ContextTypes, MessageHandler, filters,
                          PreCheckoutQueryHandler)

logging.basicConfig(level=logging.INFO)

# --------------------- –í–°–¢–ê–í–¨ –°–Æ–î–ê –°–í–û–ò –î–ê–ù–ù–´–ï (—Ç—ã —É–∂–µ –ø—Ä–∏—Å–ª–∞–ª) ---------------------
TOKEN = "8145255899:AAFQcd7SZrpvH2GVuLwxASqtg1rYYoeMHu4"
ADMIN_ID = 1758979923
STATES_FILE = "states.json"

# —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã/–ø–∞–∫–µ—Ç—ã
MAIN_CHANNEL = "https://t.me/osnvkanal"
CHANNEL_LINK = "https://t.me/+52SBJ_ZOFYg2YTky"     # –æ–±—ã—á–Ω—ã–π –ø—Ä–∏–≤–∞—Ç
VIP_CHANNEL_LINK = "https://t.me/+RW9AYUQMIjo0NjEy"  # VIP

# –ö–æ—à–µ–ª—å–∫–∏/—Å—Å—ã–ª–∫–∏
USDT_TRC20 = "TDiDg4tsuMdZYs7Afz1EsUR4gkkE5jJb9D"
USDT_ERC20 = "0xc5fd6eb0a1fd15eb98cb18bf5f57457fea8e50a3"
TON_ADDRESS = "UQAYWHW0rKhY9MEZ6UR5pn76YUJTZtlb3D1rWYcC7R6f9-EA"
CRYPTOBOT_LINK = "t.me/send?start=IVmn0QryS4jg"

DONATION_LINK = "https://www.donationalerts.com/r/gromn"
DONATELLO_LINK = "https://donatello.to/Gromn"
DONATALERTS_LINK = "https://www.donationalerts.com/r/gromn"  # –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è ‚Äî –∑–∞–º–µ–Ω–∏
FKWALLET_LINK = "https://fkwallet.io/registration?partner_code=FK3223"
FKWALLET_NUMBER = "F7202565872412476"

IMAGE_URL = "https://ibb.co/hxbvxM4L"

# –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∑–≤—ë–∑–¥ (invoice)
STARS_PROVIDER_TOKEN = "STARS"
# --------------------------------------------------------------------

# In-memory structures (kept in sync with states.json)
# pending_users: {user_id: { 'state': 'awaiting_screenshot'|'support', 'pack': '<pack>', 'method': '<method>' }}
pending_users = {}
# admin_reply_state: {admin_id: user_id_to_reply}
admin_reply_state = {}

# -------------------- states.json handling --------------------
def load_states():
    global pending_users, admin_reply_state
    if not os.path.exists(STATES_FILE):
        pending_users = {}
        admin_reply_state = {}
        return
    try:
        with open(STATES_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            pending_users = {int(k): v for k, v in data.get("pending_users", {}).items()}
            admin_reply_state = {int(k): v for k, v in data.get("admin_reply_state", {}).items()}
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å states.json: %s", e)
        pending_users = {}
        admin_reply_state = {}

def save_states():
    try:
        tmp = STATES_FILE + ".tmp"
        data = {
            "pending_users": {str(k): v for k, v in pending_users.items()},
            "admin_reply_state": {str(k): v for k, v in admin_reply_state.items()}
        }
        with open(tmp, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        os.replace(tmp, STATES_FILE)
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å states.json: %s", e)

# —Å—Ä–∞–∑—É –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_states()

# ================== FLASK keep-alive ==================
app = Flask('')

@app.route('/')
def home():
    return "Bot is running"

def run():
    app.run(host='0.0.0.0', port=3000)

def keep_alive():
    t = Thread(target=run, daemon=True)
    t.start()

# ================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==================
def main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üì¶ Private", callback_data="menu_private")],
        [InlineKeyboardButton("üëë VIP Private", callback_data="menu_vip")],
        [InlineKeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
    ]
    return InlineKeyboardMarkup(keyboard)

def back_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])

def duration_keyboard(prefix: str):
    # prefix: "private" or "vip"
    keyboard = [
        [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data=f"{prefix}_month")],
        [InlineKeyboardButton("–ì–æ–¥", callback_data=f"{prefix}_year")],
        [InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞", callback_data=f"{prefix}_forever")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    return InlineKeyboardMarkup(keyboard)

def payment_methods_keyboard(prefix_pack: str):
    # show payment methods after chosen pack (prefix_pack like "private_month" or "vip_year")
    keyboard = [
        [InlineKeyboardButton("‚≠ê –ó–≤—ë–∑–¥—ã", callback_data=f"{prefix_pack}_stars")],
        [InlineKeyboardButton("üíé TON", callback_data=f"{prefix_pack}_ton")],
        [InlineKeyboardButton("üíµ USDT", callback_data=f"{prefix_pack}_usdt")],
        [InlineKeyboardButton("ü§ñ CryptoBot", callback_data=f"{prefix_pack}_cryptobot")],
        [InlineKeyboardButton("üåç –û–ø–ª–∞—Ç–∞ –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã/–†–æ—Å—Å–∏–∏/–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö", callback_data=f"{prefix_pack}_countries")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    return InlineKeyboardMarkup(keyboard)

def usdt_network_keyboard(prefix_pack: str):
    keyboard = [
        [InlineKeyboardButton("USDT TRC20", callback_data=f"{prefix_pack}_usdt_trc")],
        [InlineKeyboardButton("USDT ERC20", callback_data=f"{prefix_pack}_usdt_erc")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    return InlineKeyboardMarkup(keyboard)

def countries_keyboard(prefix_pack: str):
    keyboard = [
        [InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞", callback_data=f"{prefix_pack}_country_ukraine")],
        [InlineKeyboardButton("üá∑üá∫ –†–æ—Å—Å–∏—è", callback_data=f"{prefix_pack}_country_russia")],
        [InlineKeyboardButton("üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω –∏ –¥—Ä—É–≥–∏–µ", callback_data=f"{prefix_pack}_country_kaz_others")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    return InlineKeyboardMarkup(keyboard)

def ukraine_methods_keyboard(prefix_pack: str):
    keyboard = [
        [InlineKeyboardButton("Donatello", callback_data=f"{prefix_pack}_uk_donatello")],
        [InlineKeyboardButton("Donat Alerts", callback_data=f"{prefix_pack}_uk_donatalerts")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    return InlineKeyboardMarkup(keyboard)

def russia_methods_keyboard(prefix_pack: str):
    keyboard = [
        [InlineKeyboardButton("Donat Alerts", callback_data=f"{prefix_pack}_ru_donatalerts")],
        [InlineKeyboardButton("FK Wallet", callback_data=f"{prefix_pack}_ru_fkwallet")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    return InlineKeyboardMarkup(keyboard)

def kazakh_methods_keyboard(prefix_pack: str):
    keyboard = [
        [InlineKeyboardButton("Donat Alerts", callback_data=f"{prefix_pack}_kz_donatalerts")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    return InlineKeyboardMarkup(keyboard)

# ================== HELPERS ==================
def pack_is_vip(pack: str) -> bool:
    return pack.startswith("vip_")

def get_channel_link_for_pack(pack: str) -> str:
    # VIP -> VIP_CHANNEL_LINK, else normal -> CHANNEL_LINK
    if pack_is_vip(pack):
        return VIP_CHANNEL_LINK
    return CHANNEL_LINK

# star amounts mapping
STARS_PRICES = {
    # pack_base: {duration: stars}
    "private": {"month": 200, "year": 500, "forever": 1000},
    "vip": {"month": 500, "year": 800, "forever": 1200},
}

# usd prices mapping
USD_PRICES = {
    "private": {"month": 3, "year": 5, "forever": 10},
    "vip": {"month": 5, "year": 10, "forever": 15},
}

# ================== –°–¢–ê–†–¢ ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # send photo with main channel and main keyboard
    if update.message:
        await update.message.reply_photo(
            photo=IMAGE_URL,
            caption=(f"üì¢ –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"),
            reply_markup=main_keyboard())
    elif update.callback_query:
        q = update.callback_query
        await q.message.reply_photo(photo=IMAGE_URL,
                                    caption=(f"üì¢ –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"),
                                    reply_markup=main_keyboard())

# ================== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ==================
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    user_id = user.id
    data = query.data

    # back to main
    if data == "back":
        await query.message.reply_photo(
            photo=IMAGE_URL,
            caption=(f"üì¢ –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"),
            reply_markup=main_keyboard())
        return

    # support
    if data == "support":
        pending_users[user_id] = {"state": "support"}
        save_states()
        await query.message.reply_text("üõ† –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ/–ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –∏–≥—Ä—ã. –ú—ã –ø–µ—Ä–µ—à–ª—ë–º –µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.")
        return

    # main menus
    if data == "menu_private":
        await query.message.reply_text("üì¶ Private ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫:", reply_markup=duration_keyboard("private"))
        return
    if data == "menu_vip":
        await query.message.reply_text("üëë VIP Private ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫:", reply_markup=duration_keyboard("vip"))
        return

    # durations -> show payment methods
    m = re.match(r"^(private|vip)_(month|year|forever)$", data)
    if m:
        base, dur = m.group(1), m.group(2)
        prefix_pack = f"{base}_{dur}"
        # show payment methods
        # show price summary
        usd = USD_PRICES[base][
