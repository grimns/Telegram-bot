import json
import os
import logging
import re
import asyncio
from threading import Thread
from flask import Flask
from telegram import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    Update, LabeledPrice, InputFile, Bot
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ContextTypes, MessageHandler, filters, PreCheckoutQueryHandler
)

# ---------------- –ù–ê–°–¢–†–û–ô–ö–ò ----------------
logging.basicConfig(level=logging.INFO)

TOKEN = "8145255899:AAFQcd7SZrpvH2GVuLwxASqtg1rYYoeMHu4"
ADMIN_ID = 1758979923
STATES_FILE = "states.json"

MAIN_CHANNEL = "https://t.me/osnvkanal"
CHANNEL_LINK = "https://t.me/+52SBJ_ZOFYg2YTky"
VIP_CHANNEL_LINK = "https://t.me/+RW9AYUQMIjo0NjEy"

USDT_TRC20 = "TDiDg4tsuMdZYs7Afz1EsUR4gkkE5jJb9D"
USDT_ERC20 = "0xc5fd6eb0a1fd15eb98cb18bf5f57457fea8e50a3"
TON_ADDRESS = "UQAYWHW0rKhY9MEZ6UR4gkkE5jJb9D1rWYcC7R6f9-EA"
CRYPTOBOT_LINK = "t.me/send?start=IVmn0QryS4jg"

DONATION_LINK = "https://www.donationalerts.com/r/gromn"
DONATELLO_LINK = "https://donatello.to/Gromn"
FKWALLET_LINK = "https://fkwallet.io/registration?partner_code=FK3223"
FKWALLET_NUMBER = "F7202565872412476"

IMAGE_URL = "https://ibb.co/hxbvxM4L"

STARS_PROVIDER_TOKEN = "STARS"

STARS_PRICES = {
    "private": {"month": 200, "year": 500, "forever": 1000},
    "vip": {"month": 500, "year": 800, "forever": 1200},
}

USD_PRICES = {
    "private": {"month": 3, "year": 5, "forever": 10},
    "vip": {"month": 5, "year": 10, "forever": 15},
}

pending_users = {}
admin_reply_state = {}

# ---------------- STATES ----------------
def load_states():
    global pending_users, admin_reply_state
    if os.path.exists(STATES_FILE):
        with open(STATES_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        pending_users = {int(k): v for k, v in data.get("pending_users", {}).items()}
        admin_reply_state = {int(k): v for k, v in data.get("admin_reply_state", {}).items()}
    else:
        pending_users.clear()
        admin_reply_state.clear()

def save_states():
    data = {
        "pending_users": {str(k): v for k, v in pending_users.items()},
        "admin_reply_state": {str(k): v for k, v in admin_reply_state.items()}
    }
    with open(STATES_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

load_states()

# ---------------- FLASK ----------------
app = Flask('')

@app.route('/')
def home():
    return "Bot is running"

def run(): app.run(host='0.0.0.0', port=3000)
def keep_alive():
    Thread(target=run, daemon=True).start()

# ---------------- –ö–õ–ê–í–ò–ê–¢–£–†–´ ----------------
def main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¶ Private", callback_data="menu_private")],
        [InlineKeyboardButton("üëë VIP Private", callback_data="menu_vip")],
        [InlineKeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ])

def back_keyboard(): 
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])

def duration_keyboard(prefix):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data=f"{prefix}_month")],
        [InlineKeyboardButton("–ì–æ–¥", callback_data=f"{prefix}_year")],
        [InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞", callback_data=f"{prefix}_forever")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def payment_methods_keyboard(prefix_pack):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚≠ê –ó–≤—ë–∑–¥—ã", callback_data=f"{prefix_pack}_stars")],
        [InlineKeyboardButton("üíé TON", callback_data=f"{prefix_pack}_ton")],
        [InlineKeyboardButton("üíµ USDT", callback_data=f"{prefix_pack}_usdt")],
        [InlineKeyboardButton("ü§ñ CryptoBot", callback_data=f"{prefix_pack}_cryptobot")],
        [InlineKeyboardButton("üåç –û–ø–ª–∞—Ç–∞ –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã/–†–æ—Å—Å–∏–∏/–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞", callback_data=f"{prefix_pack}_countries")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def countries_keyboard(prefix_pack):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞", callback_data=f"{prefix_pack}_country_ukraine")],
        [InlineKeyboardButton("üá∑üá∫ –†–æ—Å—Å–∏—è", callback_data=f"{prefix_pack}_country_russia")],
        [InlineKeyboardButton("üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω –∏ –¥—Ä—É–≥–∏–µ", callback_data=f"{prefix_pack}_country_kaz")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def ukraine_methods_keyboard(prefix_pack):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Donatello", callback_data=f"{prefix_pack}_uk_donatello")],
        [InlineKeyboardButton("Donation Alerts", callback_data=f"{prefix_pack}_uk_donatalerts")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def russia_methods_keyboard(prefix_pack):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Donation Alerts", callback_data=f"{prefix_pack}_ru_donatalerts")],
        [InlineKeyboardButton("FK Wallet", callback_data=f"{prefix_pack}_ru_fkwallet")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def kazakh_methods_keyboard(prefix_pack):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Donation Alerts", callback_data=f"{prefix_pack}_kz_donatalerts")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

# ---------------- HELPERS ----------------
def pack_is_vip(pack): return pack.startswith("vip_")
def get_channel_link(pack): return VIP_CHANNEL_LINK if pack_is_vip(pack) else CHANNEL_LINK

# ---------------- START ----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_photo(IMAGE_URL, caption=f"üì¢ –ù–∞—à –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_keyboard())

# ---------------- BUTTON HANDLER ----------------
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    user_id = query.from_user.id; data = query.data

    if data == "back":
        await query.message.reply_photo(IMAGE_URL, caption=f"üì¢ –ù–∞—à –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}", reply_markup=main_keyboard()); return

    if data == "support":
        pending_users[user_id] = {"state": "support"}; save_states()
        await query.message.reply_text("üõ† –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç."); return

    m = re.match(r"^(private|vip)_(month|year|forever)$", data)
    if m:
        base, dur = m.groups(); prefix_pack = f"{base}_{dur}"
        usd = USD_PRICES[base][dur]
        await query.message.reply_text(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {usd}$\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_methods_keyboard(prefix_pack))
        return

    if "_countries" in data:
        await query.message.reply_text("üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=countries_keyboard(data.replace("_countries", ""))); return

    if "_country_ukraine" in data:
        await query.message.reply_text("üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥:", reply_markup=ukraine_methods_keyboard(data.replace("_country_ukraine", ""))); return

    if "_country_russia" in data:
        await query.message.reply_text("üá∑üá∫ –†–æ—Å—Å–∏—è ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥:", reply_markup=russia_methods_keyboard(data.replace("_country_russia", ""))); return

    if "_country_kaz" in data:
        await query.message.reply_text("üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥:", reply_markup=kazakh_methods_keyboard(data.replace("_country_kaz", ""))); return

    if "_ru_fkwallet" in data:
        await query.message.reply_text(
            f"üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ FK Wallet\n\n"
            f"1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {FKWALLET_LINK}\n"
            f"2Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ ‚Üí –∫–æ—à–µ–ª—ë–∫ ‚Üí —Ä—É–±–ª–∏ ‚Üí –≤—ã–≤–æ–¥\n"
            f"3Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä: `{FKWALLET_NUMBER}`\n"
            f"4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É.\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")]])
        ); return

    if data == "paid":
        pending_users[user_id] = {"state": "awaiting_screenshot"}; save_states()
        await query.message.reply_text("üì∏ –°–∫–∏–Ω—å—Ç–µ —á–µ–∫. –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –≤—ã–¥–∞—Å—Ç —Å—Å—ã–ª–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤."); return

    if "_stars" in data:
        base, dur = re.match(r"^(private|vip)_(month|year|forever)_stars$", data).groups()
        price = STARS_PRICES[base][dur]
        title = f"{base.capitalize()} {dur}"
        await context.bot.send_invoice(
            chat_id=user_id,
            title=f"–ü–æ–∫—É–ø–∫–∞ {title}",
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞ {base} –Ω–∞ {dur}",
            payload=f"{base}_{dur}_stars",
            provider_token=STARS_PROVIDER_TOKEN,
            currency="XTR",
            prices=[LabeledPrice(label=f"{title}", amount=price * 100)]
        ); return

# ---------------- –ü–†–ï–ß–ï–ö–ê–£–¢ ----------------
async def precheckout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payload = update.message.successful_payment.invoice_payload
    pack = payload.replace("_stars", "")
    link = get_channel_link(pack)
    await update.message.reply_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\nüîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {link}")

# ---------------- –°–û–û–ë–©–ï–ù–ò–Ø ----------------
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in pending_users:
        state = pending_users[user_id]["state"]
        if state == "awaiting_screenshot":
            await context.bot.send_message(ADMIN_ID, f"üì© –°–∫—Ä–∏–Ω –æ—Ç {user_id}")
            if update.message.photo:
                await update.message.photo[-1].get_file().download_to_drive("user_screenshot.jpg")
                await context.bot.send_photo(ADMIN_ID, photo=InputFile("user_screenshot.jpg"),
                                             caption=f"üßæ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
                                             reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–í—ã–¥–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"give_{user_id}")]]))
            await update.message.reply_text("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ 2 —á–∞—Å–æ–≤.")
            del pending_users[user_id]; save_states(); return

        if state == "support":
            await context.bot.send_message(ADMIN_ID, f"üõ† –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {update.message.text}")
            await update.message.reply_text("üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É."); return

# ---------------- –í–´–î–ê–¢–¨ –°–°–´–õ–ö–£ ----------------
async def admin_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    m = re.match(r"^give_(\d+)$", q.data)
    if m:
        uid = int(m.group(1))
        await context.bot.send_message(uid, "‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É!\nüîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: " + get_channel_link("private"))
        await q.message.reply_text(f"–°—Å—ã–ª–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}")

# ---------------- MAIN ----------------
def main():
    keep_alive()

    # üîß –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling (–∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É Conflict)
    asyncio.run(Bot(TOKEN).delete_webhook(drop_pending_updates=True))

    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(CallbackQueryHandler(admin_button, pattern=r"^give_"))
    app.add_handler(PreCheckoutQueryHandler(precheckout))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    app.add_handler(MessageHandler(filters.ALL, handle_message))

    app.run_polling()

if __name__ == "__main__":
    main()
