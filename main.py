# mainp.py ‚Äî –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
import json
import os
import logging
import re
from threading import Thread
from flask import Flask

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, LabeledPrice
from telegram.ext import (Application, CommandHandler, CallbackQueryHandler,
                          ContextTypes, MessageHandler, filters,
                          PreCheckoutQueryHandler)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --------------------- –¢–í–û–ò –î–ê–ù–ù–´–ï ---------------------
TOKEN = "8145255899:AAFQcd7SZrpvH2GVuLwxASqtg1rYYoeMHu4"
ADMIN_ID = 1758979923
# --------------------------------------------------------------------

STATES_FILE = "states.json"
STARS_PROVIDER_TOKEN = "STARS"

# —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã/–ø–∞–∫–µ—Ç—ã
MAIN_CHANNEL = "https://t.me/osnvkanal"
CHANNEL_LINK = "https://t.me/+52SBJ_ZOFYg2YTky"     # –æ–±—ã—á–Ω—ã–π –ø—Ä–∏–≤–∞—Ç
VIP_CHANNEL_LINK = "https://t.me/+RW9AYUQMIjo0NjEy"  # VIP
DICK_CHANNEL_LINK = "https://t.me/+--5nFyT4jjQyZDEy" # Dick (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ --- –∫–∞–∫ —É —Ç–µ–±—è)

# –ö–æ—à–µ–ª—å–∫–∏/—Å—Å—ã–ª–∫–∏
USDT_TRC20 = "TDiDg4tsuMdZYs7Afz1EsUR4gkkE5jJb9D"
USDT_ERC20 = "0xc5fd6eb0a1fd15eb98cb18bf5f57457fea8e50a3"
TON_ADDRESS = "UQAYWHW0rKhY9MEZ6UR5pn76YUJTZtlb3D1rWYcC7R6f9-EA"
CRYPTOBOT_LINK = "t.me/send?start=IVmn0QryS4jg"

DONATION_LINK = "https://www.donationalerts.com/r/gromn"   # DonateAlerts
DONATELLO_LINK = "https://donatello.to/Gromn"             # Donatello
FKWALLET_LINK = "https://fkwallet.io/registration?partner_code=FK3223"
FKWALLET_NUMBER = "F7202565872412476"
# --------------------------------------------------------------------

IMAGE_URL = "https://ibb.co/hxbvxM4L"

# ----------------- –í –ø–∞–º—è—Ç–∏ / states -----------------
# pending_users: {user_id: { 'state': 'awaiting_screenshot'|'support', 'pack': '<pack>', 'category': 'vip'|'dick'|'normal' }}
pending_users = {}
# admin_reply_state: {admin_id: user_id_to_reply}
admin_reply_state = {}

# -------------------- states.json handling --------------------
def load_states():
    global pending_users, admin_reply_state
    if not os.path.exists(STATES_FILE):
        pending_users = {}
        admin_reply_state = {}
        return
    try:
        with open(STATES_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            pending_users = {int(k): v for k, v in data.get("pending_users", {}).items()}
            admin_reply_state = {int(k): v for k, v in data.get("admin_reply_state", {}).items()}
    except Exception as e:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å states.json: %s", e)
        pending_users = {}
        admin_reply_state = {}

def save_states():
    try:
        tmp = STATES_FILE + ".tmp"
        data = {
            "pending_users": {str(k): v for k, v in pending_users.items()},
            "admin_reply_state": {str(k): v for k, v in admin_reply_state.items()}
        }
        with open(tmp, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        os.replace(tmp, STATES_FILE)
    except Exception as e:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å states.json: %s", e)

load_states()

# ================== FLASK keep-alive ==================
app = Flask('')

@app.route('/')
def home():
    return "Bot is running"

def run():
    app.run(host='0.0.0.0', port=3000)

def keep_alive():
    t = Thread(target=run, daemon=True)
    t.start()

# ================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==================
def main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üí´ –û–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥–∞–º–∏ (200‚≠ê)", callback_data="pay_stars_200")],
        [InlineKeyboardButton("üíµ –û–ø–ª–∞—Ç–∞ USDT 3$", callback_data="pay_usdt")],
        [InlineKeyboardButton("üíé –û–ø–ª–∞—Ç–∞ TON 3$", callback_data="pay_ton")],
        [InlineKeyboardButton("ü§ñ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot 3$", callback_data="pay_cryptobot")],
        [InlineKeyboardButton("üåç –û–ø–ª–∞—Ç–∞ –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã, –†–æ—Å—Å–∏–∏, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö 3$", callback_data="pay_donation")],
        [InlineKeyboardButton("üëë VIP-–ø—Ä–∏–≤–∞—Ç–∫–∞", callback_data="vip_menu")],
        [InlineKeyboardButton("üçÜ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —á–ª–µ–Ω–∞", callback_data="dick_menu")],
        [InlineKeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ]
    return InlineKeyboardMarkup(keyboard)

def vip_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚≠ê VIP Stars 500‚≠ê", callback_data="vip_pay_stars_500")],
        [InlineKeyboardButton("üíµ USDT 5$", callback_data="vip_usdt")],
        [InlineKeyboardButton("üíé TON 5$", callback_data="vip_ton")],
        [InlineKeyboardButton("ü§ñ CryptoBot 5$", callback_data="vip_cryptobot")],
        [InlineKeyboardButton("üåç –û–ø–ª–∞—Ç–∞ –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã, –†–æ—Å—Å–∏–∏, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö 5$", callback_data="vip_donation")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")],
    ]
    return InlineKeyboardMarkup(keyboard)

def dick_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚≠ê –£–≤–µ–ª–∏—á–µ–Ω–∏–µ Stars 250‚≠ê", callback_data="dick_pay_stars_250")],
        [InlineKeyboardButton("üíµ USDT 3$", callback_data="dick_usdt")],
        [InlineKeyboardButton("üíé TON 3$", callback_data="dick_ton")],
        [InlineKeyboardButton("ü§ñ CryptoBot 3$", callback_data="dick_cryptobot")],
        [InlineKeyboardButton("üåç –û–ø–ª–∞—Ç–∞ –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã, –†–æ—Å—Å–∏–∏, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö 3$", callback_data="dick_donation")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")],
    ]
    return InlineKeyboardMarkup(keyboard)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –º–µ—Ç–æ–¥—ã (–∫–∞–∫ —Ç—ã –ø—Ä–æ—Å–∏–ª) ‚Äî –±–µ–∑ —Ü–µ–Ω—ã. –ö–Ω–æ–ø–∫–∏ –≤–µ–¥—É—Ç –Ω–∞ show_method (–≤—ã–≤–æ–¥ —Ü–µ–Ω—ã+—Å—Å—ã–ª–∫–∏)
def country_methods_keyboard(prefix: str):
    # prefix: pay_donation | vip_donation | dick_donation
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Donatello", callback_data=f"{prefix}_method_donatello")],
        [InlineKeyboardButton("DonateAlerts", callback_data=f"{prefix}_method_donationalerts")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=prefix)]
    ])

# –ö–Ω–æ–ø–∫–∏ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –∏ "–Ø –æ–ø–ª–∞—Ç–∏–ª" (–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞)
def payment_view_buttons(prefix: str, method_key: str, url: str, back_to: str):
    # method_key is one of "donatello", "donationalerts", "fkwallet"
    kb = []
    if url:
        kb.append([InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=url)])
    kb.append([InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{prefix}_{method_key}")])
    kb.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_to)])
    return InlineKeyboardMarkup(kb)

# ================== HELPERS ==================
def _category_from_pack(pack: str) -> str:
    p = (pack or "").lower()
    if "vip" in p:
        return "vip"
    if "dick" in p:
        return "dick"
    return "normal"

# ================== –°–¢–ê–†–¢ ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # send photo + keyboard
    try:
        await update.message.reply_photo(
            photo=IMAGE_URL,
            caption=(f"üì¢ –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"),
            reply_markup=main_keyboard()
        )
    except Exception:
        # fallback to text only if photo fails
        await update.message.reply_text(f"üì¢ –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=main_keyboard())

# ================== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ==================
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    user_id = user.id
    data = query.data or ""

    # ---------- BACK handlers ----------
    if data in ("back_main", "back"):
        # show main keyboard (edit current message if possible)
        try:
            # try to edit current message to main keyboard
            await query.edit_message_text(f"üì¢ –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=main_keyboard())
        except Exception:
            # fallback: send new message
            try:
                await query.message.reply_photo(photo=IMAGE_URL, caption=(f"üì¢ –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"), reply_markup=main_keyboard())
            except Exception:
                await query.message.reply_text(f"üì¢ –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=main_keyboard())
        return

    # ---------- Support ----------
    if data == "support":
        pending_users[user_id] = {"state": "support"}
        save_states()
        try:
            await query.edit_message_text("üõ† –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ‚Äî –º—ã –ø–µ—Ä–µ—à–ª—ë–º –µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.")
        except Exception:
            await query.message.reply_text("üõ† –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ‚Äî –º—ã –ø–µ—Ä–µ—à–ª—ë–º –µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.")
        return

    # ---------- Admin reply state ----------
    if data.startswith("replyto_"):
        if user_id != ADMIN_ID:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
            return
        try:
            target = int(data.split("_", 1)[1])
        except Exception:
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.", show_alert=True)
            return
        admin_reply_state[user_id] = target
        save_states()
        await query.edit_message_text(f"‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç ‚Äî –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}.")
        return

    # ---------- Invoices (stars) ----------
    if data == "pay_stars_200":
        prices = [LabeledPrice("–î–æ—Å—Ç—É–ø –≤ –ø—Ä–∏–≤–∞—Ç", 200)]
        try:
            await query.message.reply_invoice(
                title="–í—Ö–æ–¥ –≤ –ø—Ä–∏–≤–∞—Ç",
                description="–û–ø–ª–∞—Ç–∞ –∑–∞ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É",
                payload="privat-200stars",
                provider_token=STARS_PROVIDER_TOKEN,
                currency="XTR",
                prices=prices,
                start_parameter="stars"
            )
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞: %s", e)
            await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É –∑–≤—ë–∑–¥–∞–º–∏.")
        return

    if data == "vip_pay_stars_500":
        prices = [LabeledPrice("VIP-–ø—Ä–∏–≤–∞—Ç", 500)]
        try:
            await query.message.reply_invoice(title="VIP-–ø—Ä–∏–≤–∞—Ç–∫–∞",
                                              description="–û–ø–ª–∞—Ç–∞ –∑–∞ VIP-–ø—Ä–∏–≤–∞—Ç–∫—É",
                                              payload="vip-500stars",
                                              provider_token=STARS_PROVIDER_TOKEN,
                                              currency="XTR",
                                              prices=prices,
                                              start_parameter="vipstars")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞: %s", e)
            await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É –∑–≤—ë–∑–¥–∞–º–∏.")
        return

    if data == "dick_pay_stars_250":
        prices = [LabeledPrice("–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —á–ª–µ–Ω–∞", 250)]
        try:
            await query.message.reply_invoice(title="üçÜ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —á–ª–µ–Ω–∞",
                                              description="–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —á–ª–µ–Ω–∞",
                                              payload="dick-250stars",
                                              provider_token=STARS_PROVIDER_TOKEN,
                                              currency="XTR",
                                              prices=prices,
                                              start_parameter="dickstars")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞: %s", e)
            await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É –∑–≤—ë–∑–¥–∞–º–∏.")
        return

    # ---------- USDT / TON / Crypto flows (kept, amounts updated) ----------
    if data == "pay_usdt":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("USDT TRC20", callback_data="pay_usdt_trc")],
            [InlineKeyboardButton("USDT ERC20", callback_data="pay_usdt_erc")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
        ])
        await query.edit_message_text("üíµ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã USDT (3$):", reply_markup=kb)
        return

    if data == "pay_usdt_trc":
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_pay_usdt_trc")],
                                   [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]])
        await query.edit_message_text(f"üíµ –û–ø–ª–∞—Ç–∞ USDT TRC20\n–°—É–º–º–∞: 3$\n–ê–¥—Ä–µ—Å: {USDT_TRC20}", reply_markup=kb)
        return

    if data == "pay_usdt_erc":
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_pay_usdt_erc")],
                                   [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]])
        await query.edit_message_text(f"üíµ –û–ø–ª–∞—Ç–∞ USDT ERC20\n–°—É–º–º–∞: 3$\n–ê–¥—Ä–µ—Å: {USDT_ERC20}", reply_markup=kb)
        return

    if data == "vip_usdt":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("USDT TRC20", callback_data="vip_usdt_trc")],
            [InlineKeyboardButton("USDT ERC20", callback_data="vip_usdt_erc")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="vip_menu")]
        ])
        await query.edit_message_text("üíµ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è VIP USDT (5$):", reply_markup=kb)
        return

    if data == "vip_usdt_trc":
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_vip_usdt_trc")],
                                   [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="vip_menu")]])
        await query.edit_message_text(f"üíµ VIP –û–ø–ª–∞—Ç–∞ USDT TRC20\n–°—É–º–º–∞: 5$\n–ê–¥—Ä–µ—Å: {USDT_TRC20}", reply_markup=kb)
        return

    if data == "vip_usdt_erc":
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_vip_usdt_erc")],
                                   [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="vip_menu")]])
        await query.edit_message_text(f"üíµ VIP –û–ø–ª–∞—Ç–∞ USDT ERC20\n–°—É–º–º–∞: 5$\n–ê–¥—Ä–µ—Å: {USDT_ERC20}", reply_markup=kb)
        return

    if data == "pay_ton":
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_pay_ton")],
                                   [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]])
        await query.edit_message_text(f"üíé –û–ø–ª–∞—Ç–∞ TON\n–°—É–º–º–∞: 3$\n–ê–¥—Ä–µ—Å: {TON_ADDRESS}", reply_markup=kb)
        return

    if data == "vip_ton":
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_vip_ton")],
                                   [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="vip_menu")]])
        await query.edit_message_text(f"üíé –û–ø–ª–∞—Ç–∞ TON\n–°—É–º–º–∞: 5$\n–ê–¥—Ä–µ—Å: {TON_ADDRESS}", reply_markup=kb)
        return

    if data == "pay_cryptobot":
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ CryptoBot", url=f"https://{CRYPTOBOT_LINK}" if not CRYPTOBOT_LINK.startswith("http") else CRYPTOBOT_LINK)],
                                   [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_pay_cryptobot")],
                                   [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]])
        await query.edit_message_text(f"ü§ñ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{CRYPTOBOT_LINK}\n–°—É–º–º–∞: 3$", reply_markup=kb)
        return

    if data == "vip_cryptobot":
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ CryptoBot", url=f"https://{CRYPTOBOT_LINK}" if not CRYPTOBOT_LINK.startswith("http") else CRYPTOBOT_LINK)],
                                   [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_vip_cryptobot")],
                                   [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="vip_menu")]])
        await query.edit_message_text(f"ü§ñ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{CRYPTOBOT_LINK}\n–°—É–º–º–∞: 5$", reply_markup=kb)
        return

    # ---------- Donation menus: show country methods first ----------
    # Normal
    if data == "pay_donation":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–£–∫—Ä–∞–∏–Ω–∞", callback_data="pay_donation_country_ukraine")],
            [InlineKeyboardButton("–†–æ—Å—Å–∏—è", callback_data="pay_donation_country_russia")],
            [InlineKeyboardButton("–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω –∏ –¥—Ä—É–≥–∏–µ", callback_data="pay_donation_country_kazakhstan")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
        ])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
        return

    # VIP
    if data == "vip_donation":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–£–∫—Ä–∞–∏–Ω–∞", callback_data="vip_donation_country_ukraine")],
            [InlineKeyboardButton("–†–æ—Å—Å–∏—è", callback_data="vip_donation_country_russia")],
            [InlineKeyboardButton("–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω –∏ –¥—Ä—É–≥–∏–µ", callback_data="vip_donation_country_kazakhstan")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="vip_menu")]
        ])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –æ–ø–ª–∞—Ç—ã (VIP):", reply_markup=kb)
        return

    # Dick
    if data == "dick_donation":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–£–∫—Ä–∞–∏–Ω–∞", callback_data="dick_donation_country_ukraine")],
            [InlineKeyboardButton("–†–æ—Å—Å–∏—è", callback_data="dick_donation_country_russia")],
            [InlineKeyboardButton("–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω –∏ –¥—Ä—É–≥–∏–µ", callback_data="dick_donation_country_kazakhstan")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="dick_menu")]
        ])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –æ–ø–ª–∞—Ç—ã (–£–≤–µ–ª–∏—á–µ–Ω–∏–µ):", reply_markup=kb)
        return

    # ---------- Country selected -> show methods (Donatello / DonateAlerts / FK) ----------
    # Normal donation country buttons
    if data == "pay_donation_country_ukraine":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("Donatello", callback_data="pay_donation_method_donatello")],
            [InlineKeyboardButton("DonateAlerts", callback_data="pay_donation_method_donationalerts")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="pay_donation")]
        ])
        await query.edit_message_text("üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
        return

    if data == "pay_donation_country_russia":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("DonateAlerts", callback_data="pay_donation_method_donationalerts")],
            [InlineKeyboardButton("FK Wallet", callback_data="pay_donation_method_fkwallet")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="pay_donation")]
        ])
        await query.edit_message_text("üá∑üá∫ –†–æ—Å—Å–∏—è ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
        return

    if data == "pay_donation_country_kazakhstan":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("DonateAlerts", callback_data="pay_donation_method_donationalerts")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="pay_donation")]
        ])
        await query.edit_message_text("üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
        return

    # VIP donation country buttons
    if data == "vip_donation_country_ukraine":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("Donatello", callback_data="vip_donation_method_donatello")],
            [InlineKeyboardButton("DonateAlerts", callback_data="vip_donation_method_donationalerts")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="vip_donation")]
        ])
        await query.edit_message_text("üá∫üá¶ (VIP) –£–∫—Ä–∞–∏–Ω–∞ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
        return

    if data == "vip_donation_country_russia":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("DonateAlerts", callback_data="vip_donation_method_donationalerts")],
            [InlineKeyboardButton("FK Wallet", callback_data="vip_donation_method_fkwallet")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="vip_donation")]
        ])
        await query.edit_message_text("üá∑üá∫ (VIP) –†–æ—Å—Å–∏—è ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
        return

    if data == "vip_donation_country_kazakhstan":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("DonateAlerts", callback_data="vip_donation_method_donationalerts")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="vip_donation")]
        ])
        await query.edit_message_text("üá∞üáø (VIP) –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
        return

    # Dick donation country buttons
    if data == "dick_donation_country_ukraine":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("Donatello", callback_data="dick_donation_method_donatello")],
            [InlineKeyboardButton("DonateAlerts", callback_data="dick_donation_method_donationalerts")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="dick_donation")]
        ])
        await query.edit_message_text("üá∫üá¶ (–£–≤–µ–ª.) –£–∫—Ä–∞–∏–Ω–∞ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
        return

    if data == "dick_donation_country_russia":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("DonateAlerts", callback_data="dick_donation_method_donationalerts")],
            [InlineKeyboardButton("FK Wallet", callback_data="dick_donation_method_fkwallet")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="dick_donation")]
        ])
        await query.edit_message_text("üá∑üá∫ (–£–≤–µ–ª.) –†–æ—Å—Å–∏—è ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
        return

    if data == "dick_donation_country_kazakhstan":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("DonateAlerts", callback_data="dick_donation_method_donationalerts")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="dick_donation")]
        ])
        await query.edit_message_text("üá∞üáø (–£–≤–µ–ª.) –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
        return

    # ---------- Method selected -> show price + link + "I paid" ----------
    # Unified mapping: prefix could be pay_donation, vip_donation, dick_donation
    m = re.match(r"(?P<prefix>pay_donation|vip_donation|dick_donation|pay_donation_method|vip_donation_method|dick_donation_method)_(?P<method>.+)", data)
    if m:
        # Some callback formats are like pay_donation_method_donationalerts (the earlier code used that)
        # But we also handle variants; normalize:
        # We'll parse using split if regex not precise
        full = data
        # Determine prefix and method nicely:
        # try to find pattern ..._method_<method> first
        if "_method_" in full:
            parts = full.split("_method_")
            prefix = parts[0]
            method = parts[1]
        else:
            # fallback split by first underscore after prefix
            # Examples: pay_donation_donationalerts
            parts = full.split("_")
            prefix = "_".join(parts[:2]) if len(parts) >= 2 else parts[0]
            method = parts[-1]

        # Determine price text by trying to infer country context in previous message or prefix.
        # We'll set default 3$ and region-specific labels if prefix contains vip/dick or if message text had country names.
        text_lower = (query.message.text or "").lower()
        if "—É–∫—Ä–∞–∏–Ω" in text_lower or "—É–∫—Ä" in text_lower:
            price_text = "124 ‚Ç¥ / 3 $"
        elif "—Ä–æ—Å" in text_lower or "—Ä—É–±" in text_lower:
            price_text = "280 ‚ÇΩ / 3 $"
        elif "–∫–∞–∑–∞—Ö" in text_lower or "–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω" in text_lower:
            price_text = "3 $"
        else:
            price_text = "3 $"

        # choose URL for method
        url = None
        if "donatello" in method:
            url = DONATELLO_LINK
            method_read = "Donatello"
        elif "donationalerts" in method or "donatealerts" in method:
            url = DONATION_LINK
            method_read = "DonateAlerts"
        elif "fkwallet" in method or "fk" in method:
            url = FKWALLET_LINK
            method_read = "FK Wallet"
        else:
            # unknown -> fallback to donatealerts
            url = DONATION_LINK
            method_read = method

        # back_to should return to the country list for same prefix
        # map prefix to back target
        if prefix.startswith("pay_donation"):
            back_to = "pay_donation"
            title = "–û–ø–ª–∞—Ç–∞"
        elif prefix.startswith("vip_donation"):
            back_to = "vip_donation"
            title = "VIP –û–ø–ª–∞—Ç–∞"
        elif prefix.startswith("dick_donation"):
            back_to = "dick_donation"
            title = "–û–ø–ª–∞—Ç–∞ (–£–≤–µ–ª–∏—á–µ–Ω–∏–µ)"
        else:
            back_to = "pay_donation"
            title = "–û–ø–ª–∞—Ç–∞"

        view_text = f"üí≥ {title}\n\n–°–ø–æ—Å–æ–±: {method_read}\nüí∏ –ö –æ–ø–ª–∞—Ç–µ: {price_text}\n\n–ù–∞–∂–º–∏—Ç–µ ¬´–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ¬ª –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–ª–∏ ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω."
        await query.edit_message_text(view_text, reply_markup=payment_view_buttons(prefix, method, url, back_to))
        return

    # ---------- Dick menu (increase) - other flows (USDT/TON) ----------
    if data == "dick_menu":
        await query.edit_message_text("üçÜ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —á–ª–µ–Ω–∞. –¶–µ–Ω–∞: 250‚ÇΩ / 3 USDT / 350‚≠ê\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=dick_keyboard())
        return

    if data == "dick_usdt":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("USDT TRC20", callback_data="dick_usdt_trc")],
            [InlineKeyboardButton("USDT ERC20", callback_data="dick_usdt_erc")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="dick_menu")]
        ])
        await query.edit_message_text("üíµ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã USDT (3$):", reply_markup=kb)
        return

    if data in ("dick_usdt_trc", "dick_usdt_erc"):
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{data}")],
                                   [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="dick_menu")]])
        addr = USDT_TRC20 if data.endswith("trc") else USDT_ERC20
        await query.edit_message_text(f"üíµ –û–ø–ª–∞—Ç–∞ USDT\n–°—É–º–º–∞: 3$\n–ê–¥—Ä–µ—Å: {addr}", reply_markup=kb)
        return

    if data == "dick_ton":
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_dick_ton")],
                                   [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="dick_menu")]])
        await query.edit_message_text(f"üíé –û–ø–ª–∞—Ç–∞ TON\n–°—É–º–º–∞: 3$\n–ê–¥—Ä–µ—Å: {TON_ADDRESS}", reply_markup=kb)
        return

    if data == "dick_cryptobot":
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ CryptoBot", url=f"https://{CRYPTOBOT_LINK}" if not CRYPTOBOT_LINK.startswith("http") else CRYPTOBOT_LINK)],
                                   [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_dick_cryptobot")],
                                   [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="dick_menu")]])
        await query.edit_message_text(f"ü§ñ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{CRYPTOBOT_LINK}\n–°—É–º–º–∞: 3$", reply_markup=kb)
        return

    # ---------- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª" ----------
    if data.startswith("paid_"):
        # Normalize pack identifier: remove leading "paid_"
        pack = data[len("paid_"):]  # e.g. pay_donation_ukraine or pay_donation_method_donationalerts etc
        # For consistency store pack as the thing after paid_
        category = _category_from_pack(pack)
        pending_users[user_id] = {"state": "awaiting_screenshot", "pack": pack, "category": category}
        save_states()

        # Ask user to send a screenshot of payment
        try:
            await query.edit_message_text(
                "‚úÖ –û—Ç–º–µ—Ç–∫–∞: '–Ø –æ–ø–ª–∞—Ç–∏–ª'.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω/—á–µ–∫ –æ–ø–ª–∞—Ç—ã —Å—é–¥–∞ ‚Äî –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –≤—ã–¥–∞—Å—Ç –¥–æ—Å—Ç—É–ø."
            )
        except Exception:
            await query.message.reply_text(
                "‚úÖ –û—Ç–º–µ—Ç–∫–∞: '–Ø –æ–ø–ª–∞—Ç–∏–ª'.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω/—á–µ–∫ –æ–ø–ª–∞—Ç—ã —Å—é–¥–∞ ‚Äî –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –≤—ã–¥–∞—Å—Ç –¥–æ—Å—Ç—É–ø."
            )

        # notify admin that user pressed "I paid" (admin will wait for screenshot)
        try:
            await context.bot.send_message(
                ADMIN_ID,
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user_id} (ID: {user_id}) –æ—Ç–º–µ—Ç–∏–ª –æ–ø–ª–∞—Ç—É: {pack}. –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–∫—Ä–∏–Ω."
            )
        except Exception as e:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ –ø–æ–º–µ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã: %s", e)
        return

    # ---------- –ê–¥–º–∏–Ω –≤—ã–¥–∞–ª —Å—Å—ã–ª–∫—É –∫–Ω–æ–ø–∫–æ–π (–Ω–∞–∂–∞—Ç–∞ –ø–æ–¥ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º —Ñ–æ—Ç–æ) ----------
    if data.startswith("give_"):
        if user_id != ADMIN_ID:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
            return
        try:
            target_id = int(data.split("_", 1)[1])
        except Exception:
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.", show_alert=True)
            return
        if target_id in pending_users:
            info = pending_users[target_id]
            category = info.get("category", "normal")
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category == "vip":
                link = VIP_CHANNEL_LINK
            elif category == "dick":
                link = DICK_CHANNEL_LINK
            else:
                link = CHANNEL_LINK
            try:
                await context.bot.send_message(target_id, f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{link}")
                await query.answer(f"–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
                # remove pending
                try:
                    del pending_users[target_id]
                except KeyError:
                    pass
                save_states()
                # remove "–í—ã–¥–∞—Ç—å —Å—Å—ã–ª–∫—É" button under admin message
                try:
                    await query.edit_message_reply_markup(reply_markup=None)
                except Exception:
                    pass
            except Exception as e:
                logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %s", e)
                await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", show_alert=True)
        else:
            await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö.", show_alert=True)
        return

    # Fallback ‚Äî –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π (–Ω–∞ –≤—Å—è–∫–∏–π)
    await query.answer()

# ================== PreCheckout (Stars) ==================
async def precheckout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

# ================== –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ Stars ==================
async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment = update.message.successful_payment
    user_id = update.message.from_user.id
    payload = payment.invoice_payload
    if payload in ["privat-200stars", "vip-500stars", "dick-250stars"]:
        if "vip" in payload:
            link = VIP_CHANNEL_LINK
        elif "dick" in payload:
            link = DICK_CHANNEL_LINK
        else:
            link = CHANNEL_LINK
        await update.message.reply_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!\n–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:\n{link}")
        try:
            await context.bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{update.message.from_user.username or user_id} (ID: {user_id}) –æ–ø–ª–∞—Ç–∏–ª {payload}")
        except Exception:
            pass

# ================== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã) ==================
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    username = user.username or "–±–µ–∑_username"

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–∏–π —Å–∫—Ä–∏–Ω ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–æ–π "–í—ã–¥–∞—Ç—å —Å—Å—ã–ª–∫—É"
    if user_id in pending_users and pending_users[user_id].get("state") == "awaiting_screenshot":
        info = pending_users[user_id]
        pack = info.get("pack", "unknown")
        category = info.get("category", "normal")
        if category == "vip":
            caption_type = "üëë VIP –ø—Ä–∏–≤–∞—Ç–∫–∞"
        elif category == "dick":
            caption_type = "üçÜ Dick –ø—Ä–∏–≤–∞—Ç–∫–∞"
        else:
            caption_type = "üí´ –û–±—ã—á–Ω—ã–π –¥–æ—Å—Ç—É–ø"

        caption = f"üì∏ –°–∫—Ä–∏–Ω –æ—Ç @{username} (ID: {user_id})\n–ü–∞–∫–µ—Ç: {pack} | {caption_type}"
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(f"‚úÖ –í—ã–¥–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"give_{user_id}")]])
        try:
            # –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É (—Ñ–∞–π–ª_id) —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–æ–π
            await context.bot.send_photo(
                ADMIN_ID,
                photo=update.message.photo[-1].file_id,
                caption=caption,
                reply_markup=keyboard
            )
            await update.message.reply_text("üì® –°–∫—Ä–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–∫—Ä–∏–Ω–∞ –∞–¥–º–∏–Ω—É: %s", e)
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ support ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    if user_id in pending_users and pending_users[user_id].get("state") == "support":
        try:
            await context.bot.send_photo(
                ADMIN_ID,
                photo=update.message.photo[-1].file_id,
                caption=(f"üì∏ –°–æ–æ–±—â–µ–Ω–∏–µ/—Å–∫—Ä–∏–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç @{username} (ID: {user_id})"),
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"replyto_{user_id}")]])
            )
            await update.message.reply_text("üì® –í–∞—à–µ —Ñ–æ—Ç–æ/—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–¥–º–∏–Ω—É: %s", e)
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        try:
            del pending_users[user_id]
            save_states()
        except KeyError:
            pass
        return

    # –ò–Ω–∞—á–µ ‚Äî –ø—Ä–æ—Å–∏–º —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–∞—Ç—å "–Ø –æ–ø–ª–∞—Ç–∏–ª"
    await update.message.reply_text(
        "‚ùó –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω: —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª' –≤ –º–µ–Ω—é –Ω—É–∂–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω."
    )

# ================== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∞–¥–º–∏–Ω /reply –∏ —Ç.–¥.) ==================
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    text = update.message.text or ""
    username = user.username or "–±–µ–∑_username"

    # support message
    if user_id in pending_users and pending_users[user_id].get("state") == "support":
        try:
            await context.bot.send_message(
                ADMIN_ID,
                f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç @{username} (ID: {user_id}):\n\n{text}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"replyto_{user_id}")]])
            )
            await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–¥–º–∏–Ω—É: %s", e)
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        try:
            del pending_users[user_id]
            save_states()
        except KeyError:
            pass
        return

    # admin: stateful reply
    if user_id == ADMIN_ID and user_id in admin_reply_state:
        target_id = admin_reply_state[user_id]
        if not text.strip():
            await update.message.reply_text("‚ùó –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            return
        try:
            await context.bot.send_message(target_id, f"üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {text}")
            await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        try:
            del admin_reply_state[user_id]
            save_states()
        except KeyError:
            pass
        return

    # admin: reply to message with ID in caption
    if user_id == ADMIN_ID and update.message.reply_to_message:
        orig = update.message.reply_to_message
        content = (orig.text or "") + "\n" + (orig.caption or "")
        m = re.search(r"ID[:\s]*([0-9]{5,})", content)
        if m:
            try:
                target = int(m.group(1))
                if not text.strip():
                    await update.message.reply_text("‚ùó –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                    return
                await context.bot.send_message(target, f"üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {text}")
                await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            return

    # old /reply_<id>
    if text.startswith("/reply_") and user_id == ADMIN_ID:
        parts = text.split(" ", 1)
        cmd = parts[0]
        reply_text = parts[1] if len(parts) > 1 else ""
        if "_" in cmd and reply_text:
            try:
                target_id = int(cmd.replace("/reply_", ""))
                try:
                    await context.bot.send_message(target_id, f"üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {reply_text}")
                    await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
                except Exception as e:
                    await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reply_<id> —Ç–µ–∫—Å—Ç")
        else:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /reply_<id> —Ç–µ–∫—Å—Ç")
        return

    # default help
    await update.message.reply_text(
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç. –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞'."
    )

# ================== –ó–∞–ø—É—Å–∫ ==================
def main():
    load_states()
    keep_alive()
    if TOKEN.startswith("<") or ADMIN_ID == 0:
        print("ERROR: –í—Å—Ç–∞–≤—å TOKEN –∏ ADMIN_ID –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
        return

    app_bot = Application.builder().token(TOKEN).build()

    app_bot.add_handler(CommandHandler("start", start))
    app_bot.add_handler(CallbackQueryHandler(button))
    app_bot.add_handler(PreCheckoutQueryHandler(precheckout))
    app_bot.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    app_bot.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app_bot.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app_bot.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
