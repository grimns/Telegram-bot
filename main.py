from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from flask import Flask
from threading import Thread

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "8145255899:AAFQcd7SZrpvH2GVuLwxASqtg1rYYoeMHu4"
USDT_TRC20 = "TDiDg4tsuMdZYs7Afz1EsUR4gkkE5jJb9D"
USDT_ERC20 = "0xc5fd6eb0a1fd15eb98cb18bf5f57457fea8e50a3"
TON_ADDRESS = "UQAYWHW0rKhY9MEZ6UR5pn76YUJTZtlb3D1rWYcC7R6f9-EA"
CRYPTOBOT_LINK = "t.me/send?start=IVmn0QryS4jg"
CHANNEL_LINK = "https://t.me/+52SBJ_ZOFYg2YTky"
MAIN_CHANNEL = "https://t.me/osnvkanal"
DONATION_LINK = "https://www.donationalerts.com/r/gromn"
IMAGE_URL = "https://ibb.co/hxbvxM4L"
ADMIN_ID = 1758979923  # —Ç–≤–æ–π Telegram ID

pending_users = {}

# === Flask –¥–ª—è keep_alive ===
app = Flask('')


@app.route('/')
def home():
    return "Bot is running"


def run():
    app.run(host='0.0.0.0', port=3000)


def keep_alive():
    t = Thread(target=run)
    t.start()


# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üíµ –û–ø–ª–∞—Ç–∞ USDT", callback_data="pay_usdt")],
        [InlineKeyboardButton("üíé –û–ø–ª–∞—Ç–∞ TON", callback_data="pay_ton")],
        [
            InlineKeyboardButton("ü§ñ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot",
                                 callback_data="pay_cryptobot")
        ],
        [InlineKeyboardButton("üí´ –û–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥–∞–º–∏", callback_data="pay_stars")],
        [
            InlineKeyboardButton(
                "üåç –û–ø–ª–∞—Ç–∞ –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã, –†–æ—Å—Å–∏–∏, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö",
                callback_data="pay_donation")
        ], [InlineKeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ]
    return InlineKeyboardMarkup(keyboard)


def back_keyboard():
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])


# === –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_photo(
        photo=IMAGE_URL,
        caption=(
            f"üì¢ –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}\n\n"
            "–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø? –°—Ç–æ–∏–º–æ—Å—Ç—å: 3$\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"),
        reply_markup=main_keyboard())


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    user_id = user.id

    if query.data == "back":
        await query.message.reply_photo(
            photo=IMAGE_URL,
            caption=
            (f"üì¢ –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}\n\n"
             "–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø? –°—Ç–æ–∏–º–æ—Å—Ç—å: 3$\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
             ),
            reply_markup=main_keyboard())

    elif query.data == "pay_stars":
        await query.message.reply_text(
            "üí´ –û–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=back_keyboard())

    elif query.data == "pay_usdt":
        keyboard = [[
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_usdt")
        ], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            f"üíµ –û–ø–ª–∞—Ç–∞ USDT\n–°—É–º–º–∞: 3$\n–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å:\n`{USDT_ADDRESS}`",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "pay_ton":
        keyboard = [[
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_ton")
        ], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            f"üíé –û–ø–ª–∞—Ç–∞ TON\n–°—É–º–º–∞: 3$\n–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å:\n`{TON_ADDRESS}`",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "pay_cryptobot":
        keyboard = [[
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_cryptobot")
        ], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            f"ü§ñ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{CRYPTOBOT_LINK}\n–°—É–º–º–∞: 3$",
            reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "pay_donation":
        keyboard = [[
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_donation")
        ], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            f"üåç –û–ø–ª–∞—Ç–∞ –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã, –†–æ—Å—Å–∏–∏, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö\n–°—É–º–º–∞: 3$\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{DONATION_LINK}",
            reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "support":
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            "üõ† –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∏–∂–µ, –∏ –æ–Ω–æ –ø—Ä–∏–¥–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. "
            "–û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ.",
            reply_markup=InlineKeyboardMarkup(keyboard))
        pending_users[user_id] = "SUPPORT"

    elif query.data.startswith("paid_"):
        pay_type = query.data.replace("paid_", "").upper()
        pending_users[user_id] = pay_type
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –°–∫–∏–Ω—å—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —á–∞—Å–æ–≤, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ —Å–∫–∏–Ω–µ—Ç –≤–∞–º —Å—Å—ã–ª–∫—É.",
            reply_markup=InlineKeyboardMarkup(keyboard))
        await context.bot.send_message(
            ADMIN_ID,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} (ID: {user.id}) –æ–ø–ª–∞—Ç–∏–ª —á–µ—Ä–µ–∑ {pay_type}.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å —Å—Å—ã–ª–∫—É.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(f"–í—ã–¥–∞—Ç—å —Å—Å—ã–ª–∫—É {user.username}",
                                     callback_data=f"give_{user_id}")
            ]]))

    elif query.data.startswith("give_"):
        if user_id != ADMIN_ID:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                               show_alert=True)
            return
        target_id = int(query.data.split("_")[1])
        if target_id in pending_users:
            await context.bot.send_message(
                target_id,
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:\n{CHANNEL_LINK}")
            await query.answer(f"–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
            del pending_users[target_id]
        else:
            await query.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç.",
                show_alert=True)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ ===
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id == ADMIN_ID:
        return
    await context.bot.send_photo(
        ADMIN_ID,
        photo=update.message.photo[-1].file_id,
        caption=f"–°–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã –æ—Ç @{user.username} (ID: {user.id})")
    await update.message.reply_text(
        "üì® –°–∫—Ä–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É, –æ–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å—Å—ã–ª–∫—É.")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    text = update.message.text

    if user_id in pending_users and pending_users[user_id] == "SUPPORT":
        await context.bot.send_message(
            ADMIN_ID,
            f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç @{user.username} (ID: {user.id}):\n{text}\n\n"
            f"–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            f"/reply_{user_id} –¢–ï–ö–°–¢_–û–¢–í–ï–¢–ê")
        await update.message.reply_text(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.")
        del pending_users[user_id]


# === –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ ===
async def reply_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    msg = update.message.text
    parts = msg.split(" ", 1)
    cmd = parts[0]
    reply_text = parts[1] if len(parts) > 1 else ""

    if "_" in cmd and reply_text:
        target_id = int(cmd.split("_")[1])
        await context.bot.send_message(target_id, f"üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {reply_text}")
        await update.message.reply_text(
            f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    keep_alive()
    app_bot = Application.builder().token(TOKEN).build()
    app_bot.add_handler(CommandHandler("start", start))
    app_bot.add_handler(CallbackQueryHandler(button))
    app_bot.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app_bot.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app_bot.add_handler(
        MessageHandler(filters.TEXT & filters.Regex(r"^/reply_\d+"),
                       reply_command))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app_bot.run_polling()


if __name__ == "__main__":
    main()

