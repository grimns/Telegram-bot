from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, LabeledPrice
from telegram.ext import (Application, CommandHandler, CallbackQueryHandler,
                          ContextTypes, MessageHandler, filters,
                          PreCheckoutQueryHandler)
from flask import Flask
from threading import Thread
import logging
import re

logging.basicConfig(level=logging.INFO)

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
TOKEN = "8145255899:AAFQcd7SZrpvH2GVuLwxASqtg1rYYoeMHu4"
ADMIN_ID = 1758979923

STARS_PROVIDER_TOKEN = "STARS"

MAIN_CHANNEL = "https://t.me/osnvkanal"
CHANNEL_LINK = "https://t.me/+52SBJ_ZOFYg2YTky"
VIP_CHANNEL_LINK = "https://t.me/+RW9AYUQMIjo0NjEy"
DICK_CHANNEL_LINK = "https://t.me/+--5nFyT4jjQyZDEy"  # <-- –ø–æ–º–µ–Ω—è–π –Ω–∞ —Å–≤–æ–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

USDT_TRC20 = "TDiDg4tsuMdZYs7Afz1EsUR4gkkE5jJb9D"
USDT_ERC20 = "0xc5fd6eb0a1fd15eb98cb18bf5f57457fea8e50a3"
TON_ADDRESS = "UQAYWHW0rKhY9MEZ6UR5pn76YUJTZtlb3D1rWYcC7R6f9-EA"
CRYPTOBOT_LINK = "t.me/send?start=IVmn0QryS4jg"
DONATION_LINK = "https://www.donationalerts.com/r/gromn"

IMAGE_URL = "https://ibb.co/hxbvxM4L"

pending_users = {}  # {user_id: pack_type}
admin_reply_state = {}  # {admin_id: user_id_to_reply}

# ================== FLASK keep-alive ==================
app = Flask('')


@app.route('/')
def home():
    return "Bot is running"


def run():
    app.run(host='0.0.0.0', port=3000)


def keep_alive():
    t = Thread(target=run)
    t.start()


# ================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==================
def main_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("üí´ –û–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥–∞–º–∏ (200‚≠ê)",
                                 callback_data="pay_stars_200")
        ],
        [InlineKeyboardButton("üíµ –û–ø–ª–∞—Ç–∞ USDT 3$", callback_data="pay_usdt")],
        [InlineKeyboardButton("üíé –û–ø–ª–∞—Ç–∞ TON 3$", callback_data="pay_ton")],
        [
            InlineKeyboardButton("ü§ñ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot 3$",
                                 callback_data="pay_cryptobot")
        ],
        [
            InlineKeyboardButton(
                "üåç –û–ø–ª–∞—Ç–∞ –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã, –†–æ—Å—Å–∏–∏, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö 3$",
                callback_data="pay_donation")
        ],
        [InlineKeyboardButton("üëë VIP-–ø—Ä–∏–≤–∞—Ç–∫–∞", callback_data="vip_menu")],
        [
            InlineKeyboardButton("üçÜ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —á–ª–µ–Ω–∞",
                                 callback_data="dick_menu")
        ],
        [InlineKeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
    ]
    return InlineKeyboardMarkup(keyboard)


def back_keyboard():
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])


def vip_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("‚≠ê VIP Stars 500‚≠ê",
                                 callback_data="vip_pay_stars_500")
        ],
        [InlineKeyboardButton("üíµ USDT 10$", callback_data="vip_usdt")],
        [InlineKeyboardButton("üíé TON 10$", callback_data="vip_ton")],
        [
            InlineKeyboardButton("ü§ñ CryptoBot 10$",
                                 callback_data="vip_cryptobot")
        ],
        [
            InlineKeyboardButton(
                "üåç –û–ø–ª–∞—Ç–∞ –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã, –†–æ—Å—Å–∏–∏, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö 10$",
                callback_data="vip_donation")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
    ]
    return InlineKeyboardMarkup(keyboard)


def dick_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("‚≠ê –£–≤–µ–ª–∏—á–µ–Ω–∏–µ Stars 350‚≠ê",
                                 callback_data="dick_pay_stars_350")
        ],
        [InlineKeyboardButton("üíµ USDT 3$", callback_data="dick_usdt")],
        [InlineKeyboardButton("üíé TON 3$", callback_data="dick_ton")],
        [
            InlineKeyboardButton("ü§ñ CryptoBot 3$",
                                 callback_data="dick_cryptobot")
        ],
        [
            InlineKeyboardButton(
                "üåç –û–ø–ª–∞—Ç–∞ –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã, –†–æ—Å—Å–∏–∏, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö 3$",
                callback_data="dick_donation")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
    ]
    return InlineKeyboardMarkup(keyboard)


# ================== –°–¢–ê–†–¢ ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_photo(
        photo=IMAGE_URL,
        caption=(
            f"üì¢ –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        ),
        reply_markup=main_keyboard())


# ================== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ==================
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    user_id = user.id
    data = query.data

    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
    if data == "back":
        await query.message.reply_photo(
            photo=IMAGE_URL,
            caption=
            (f"üì¢ –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
             ),
            reply_markup=main_keyboard())
        return

    # ===== –ü–æ–¥–¥–µ—Ä–∂–∫–∞ (–ø–æ–º–µ—Ç–∫–∞) =====
    if data == "support":
        pending_users[user_id] = "support"
        await query.message.reply_text(
            "üõ† –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ú—ã –ø–µ—Ä–µ—à–ª—ë–º –µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.")
        return

    # ===== –ê–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é" (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º state) =====
    if data.startswith("replyto_"):
        if user_id != ADMIN_ID:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                               show_alert=True)
            return
        try:
            target = int(data.split("_", 1)[1])
        except Exception:
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.", show_alert=True)
            return
        admin_reply_state[user_id] = target
        await query.message.reply_text(
            f"‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}."
        )
        return

    # ===== –û–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥–∞–º–∏ (–æ–±—ã—á–Ω–∞—è) =====
    if data == "pay_stars_200":
        prices = [LabeledPrice("–î–æ—Å—Ç—É–ø –≤ –ø—Ä–∏–≤–∞—Ç", 200)]
        await query.message.reply_invoice(
            title="–í—Ö–æ–¥ –≤ –ø—Ä–∏–≤–∞—Ç",
            description="–û–ø–ª–∞—Ç–∞ –∑–∞ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É",
            payload="privat-200stars",
            provider_token=STARS_PROVIDER_TOKEN,
            currency="XTR",
            prices=prices,
            start_parameter="stars")
        return

    # ===== VIP stars =====
    if data == "vip_pay_stars_500":
        prices = [LabeledPrice("VIP-–ø—Ä–∏–≤–∞—Ç", 500)]
        await query.message.reply_invoice(title="VIP-–ø—Ä–∏–≤–∞—Ç–∫–∞",
                                          description="–û–ø–ª–∞—Ç–∞ –∑–∞ VIP-–ø—Ä–∏–≤–∞—Ç–∫—É",
                                          payload="vip-500stars",
                                          provider_token=STARS_PROVIDER_TOKEN,
                                          currency="XTR",
                                          prices=prices,
                                          start_parameter="vipstars")
        return

    # ===== –û–±—ã—á–Ω–∞—è USDT (–≤—ã–±–æ—Ä —Å–µ—Ç–∏) =====
    if data == "pay_usdt":
        keyboard = [[
            InlineKeyboardButton("USDT TRC20", callback_data="pay_usdt_trc")
        ], [InlineKeyboardButton("USDT ERC20", callback_data="pay_usdt_erc")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            "üíµ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã USDT (3$):",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if data == "pay_usdt_trc":
        keyboard = [[
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª",
                                 callback_data="paid_pay_usdt_trc")
        ], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            f"üíµ –û–ø–ª–∞—Ç–∞ USDT TRC20\n–°—É–º–º–∞: 3$\n–ê–¥—Ä–µ—Å: `{USDT_TRC20}`",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if data == "pay_usdt_erc":
        keyboard = [[
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª",
                                 callback_data="paid_pay_usdt_erc")
        ], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            f"üíµ –û–ø–ª–∞—Ç–∞ USDT ERC20\n–°—É–º–º–∞: 3$\n–ê–¥—Ä–µ—Å: `{USDT_ERC20}`",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # ===== VIP USDT (–≤—ã–±–æ—Ä —Å–µ—Ç–∏) =====
    if data == "vip_usdt":
        keyboard = [[
            InlineKeyboardButton("USDT TRC20", callback_data="vip_usdt_trc")
        ], [InlineKeyboardButton("USDT ERC20", callback_data="vip_usdt_erc")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            "üíµ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è VIP USDT (10$):",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if data == "vip_usdt_trc":
        keyboard = [[
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª",
                                 callback_data="paid_vip_usdt_trc")
        ], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            f"üíµ VIP –û–ø–ª–∞—Ç–∞ USDT TRC20\n–°—É–º–º–∞: 10$\n–ê–¥—Ä–µ—Å: `{USDT_TRC20}`",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if data == "vip_usdt_erc":
        keyboard = [[
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª",
                                 callback_data="paid_vip_usdt_erc")
        ], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            f"üíµ VIP –û–ø–ª–∞—Ç–∞ USDT ERC20\n–°—É–º–º–∞: 10$\n–ê–¥—Ä–µ—Å: `{USDT_ERC20}`",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # ===== –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø–ª–∞—Ç—ã (–æ–±—â–∏–µ) =====
    if data == "pay_ton":
        keyboard = [[
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_pay_ton")
        ], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            f"üíé –û–ø–ª–∞—Ç–∞ TON\n–°—É–º–º–∞: 3$\n–ê–¥—Ä–µ—Å: `{TON_ADDRESS}`",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if data == "pay_cryptobot":
        keyboard = [[
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª",
                                 callback_data=f"paid_pay_cryptobot")
        ], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            f"ü§ñ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{CRYPTOBOT_LINK}\n–°—É–º–º–∞: 3$",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if data == "pay_donation":
        keyboard = [[
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª",
                                 callback_data=f"paid_pay_donation")
        ], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            f"üåç –û–ø–ª–∞—Ç–∞ –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã, –†–æ—Å—Å–∏–∏, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö\n–°—É–º–º–∞: 3$\n–°—Å—ã–ª–∫–∞: {DONATION_LINK}",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # ===== VIP –º–µ–Ω—é =====
    if data == "vip_menu":
        await query.message.reply_text(
            "üëë VIP-–ø—Ä–∏–≤–∞—Ç–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=vip_keyboard())
        return

    if data == "vip_ton":
        keyboard = [[
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_vip_ton")
        ], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            f"üíé –û–ø–ª–∞—Ç–∞ TON\n–°—É–º–º–∞: 10$\n–ê–¥—Ä–µ—Å: `{TON_ADDRESS}`",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if data == "vip_cryptobot":
        keyboard = [[
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª",
                                 callback_data=f"paid_vip_cryptobot")
        ], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            f"ü§ñ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{CRYPTOBOT_LINK}\n–°—É–º–º–∞: 10$",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if data == "vip_donation":
        keyboard = [[
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª",
                                 callback_data=f"paid_vip_donation")
        ], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            f"üåç –û–ø–ª–∞—Ç–∞ –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã, –†–æ—Å—Å–∏–∏, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö\n–°—É–º–º–∞: 10$\n–°—Å—ã–ª–∫–∞: {DONATION_LINK}",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # ===== –£–í–ï–õ–ò–ß–ï–ù–ò–ï –ß–õ–ï–ù–ê (–∑–∞–º–µ–Ω–∞ –ò–≥—Ä—ã) =====
    if data == "dick_menu":
        await query.message.reply_text(
            "üçÜ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —á–ª–µ–Ω–∞. –¶–µ–Ω–∞: 250‚ÇΩ / 3 USDT / 350‚≠ê\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=dick_keyboard())
        return

    if data == "dick_pay_stars_350":
        prices = [LabeledPrice("–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —á–ª–µ–Ω–∞", 350)]
        await query.message.reply_invoice(
            title="üçÜ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —á–ª–µ–Ω–∞",
            description="–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —á–ª–µ–Ω–∞",
            payload="dick-350stars",
            provider_token=STARS_PROVIDER_TOKEN,
            currency="XTR",
            prices=prices,
            start_parameter="dickstars")
        return

    if data == "dick_usdt":
        keyboard = [[
            InlineKeyboardButton("USDT TRC20", callback_data="dick_usdt_trc")
        ], [InlineKeyboardButton("USDT ERC20", callback_data="dick_usdt_erc")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            "üíµ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã USDT (3$):",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if data == "dick_usdt_trc":
        keyboard = [[
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª",
                                 callback_data="paid_dick_usdt_trc")
        ], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            f"üíµ –û–ø–ª–∞—Ç–∞ USDT TRC20\n–°—É–º–º–∞: 3$\n–ê–¥—Ä–µ—Å: `{USDT_TRC20}`",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if data == "dick_usdt_erc":
        keyboard = [[
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª",
                                 callback_data="paid_dick_usdt_erc")
        ], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            f"üíµ –û–ø–ª–∞—Ç–∞ USDT ERC20\n–°—É–º–º–∞: 3$\n–ê–¥—Ä–µ—Å: `{USDT_ERC20}`",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if data == "dick_ton":
        keyboard = [[
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_dick_ton")
        ], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            f"üíé –û–ø–ª–∞—Ç–∞ TON\n–°—É–º–º–∞: 3$\n–ê–¥—Ä–µ—Å: `{TON_ADDRESS}`",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if data == "dick_cryptobot":
        keyboard = [[
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª",
                                 callback_data=f"paid_dick_cryptobot")
        ], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            f"ü§ñ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{CRYPTOBOT_LINK}\n–°—É–º–º–∞: 3$",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if data == "dick_donation":
        keyboard = [[
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª",
                                 callback_data=f"paid_dick_donation")
        ], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.message.reply_text(
            f"üåç –û–ø–ª–∞—Ç–∞ –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã, –†–æ—Å—Å–∏–∏, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö\n–°—É–º–º–∞: 3$\n–°—Å—ã–ª–∫–∞: {DONATION_LINK}",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # ===== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª" =====
    # –≠–¢–ê –ß–ê–°–¢–¨ –•–†–ê–ù–ò–¢ pack (–Ω–∞–ø—Ä–∏–º–µ—Ä: "dick_usdt_trc", "pay_usdt_trc", "vip_usdt_trc", "pay_dick_usdt_trc", "vip", "dick" –∏ —Ç.–¥.)
    if data.startswith("paid_"):
        pack = data.replace("paid_", "")
        pending_users[user_id] = pack
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await query.message.reply_text(
            "‚úÖ –°–∫–∏–Ω—å—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ —Å–∫–∏–Ω–µ—Ç –≤–∞–º —Å—Å—ã–ª–∫—É.")
        # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—Ç–∏–ª –æ–ø–ª–∞—Ç—É (–∏ –¥–∞—ë–º –∫–Ω–æ–ø–∫—É –≤—ã–¥–∞—Ç—å —Å—Å—ã–ª–∫—É —Å—Ä–∞–∑—É)
        try:
            await context.bot.send_message(
                ADMIN_ID,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user_id} (ID: {user_id}) –æ—Ç–º–µ—Ç–∏–ª –æ–ø–ª–∞—Ç—É: {pack}.\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å —Å—Å—ã–ª–∫—É:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton(
                        f"–í—ã–¥–∞—Ç—å —Å—Å—ã–ª–∫—É {user.username or user_id}",
                        callback_data=f"give_{user_id}")
                ]]))
        except Exception as e:
            logging.exception(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ –ø–æ–º–µ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã: %s", e)
        return

    # ===== –ê–¥–º–∏–Ω –≤—ã–¥–∞–ª —Å—Å—ã–ª–∫—É –∫–Ω–æ–ø–∫–æ–π =====
    if data.startswith("give_"):
        if user_id != ADMIN_ID:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                               show_alert=True)
            return
        try:
            target_id = int(data.split("_", 1)[1])
        except Exception:
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.", show_alert=True)
            return
        if target_id in pending_users:
            method = pending_users[target_id]
            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ —Å–ª–∞—Ç—å —Å—Å—ã–ª–∫—É
            if "vip" in method:
                link = VIP_CHANNEL_LINK
            elif "dick" in method:
                link = DICK_CHANNEL_LINK
            else:
                link = CHANNEL_LINK
            await context.bot.send_message(
                target_id,
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:\n{link}")
            await query.answer(f"–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
            del pending_users[target_id]
        else:
            await query.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç.",
                show_alert=True)
        return

    # –ï—Å–ª–∏ –ø–æ–ø–∞–ª–∏ —Å—é–¥–∞ ‚Äî –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    await query.answer()


# ================== PreCheckout (Stars) ==================
async def precheckout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)


# ================== –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ Stars ==================
async def successful_payment(update: Update,
                             context: ContextTypes.DEFAULT_TYPE):
    payment = update.message.successful_payment
    user_id = update.message.from_user.id
    payload = payment.invoice_payload

    # payload'—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∏–Ω–≤–æ–π—Å–∞–º –≤—ã—à–µ
    if payload in ["privat-200stars", "vip-500stars", "dick-350stars"]:
        if "vip" in payload:
            link = VIP_CHANNEL_LINK
        elif "dick" in payload:
            link = DICK_CHANNEL_LINK
        else:
            link = CHANNEL_LINK
        # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞—ë–º —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!\n–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:\n{link}")
        await context.bot.send_message(
            ADMIN_ID,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{update.message.from_user.username or user_id} (ID: {user_id}) –æ–ø–ª–∞—Ç–∏–ª {payload}"
        )


# ================== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã) ==================
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    username = user.username or "–±–µ–∑_username"

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–Ø –æ–ø–ª–∞—Ç–∏–ª" —Ä–∞–Ω–µ–µ ‚Äî –æ–∂–∏–¥–∞–µ–º —Å–∫—Ä–∏–Ω
    if user_id in pending_users and pending_users[user_id] != "support":
        pack = pending_users[user_id]
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É —Ñ–æ—Ç–æ + –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ —Å—Å—ã–ª–∫–∏
        keyboard = [[
            InlineKeyboardButton(f"–í—ã–¥–∞—Ç—å —Å—Å—ã–ª–∫—É @{user.username or user_id}",
                                 callback_data=f"give_{user_id}")
        ]]
        await context.bot.send_photo(
            ADMIN_ID,
            photo=update.message.photo[-1].file_id,
            caption=
            f"üì∏ –°–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã –æ—Ç @{username} (ID: {user_id})\n–ü–∞–∫–µ—Ç: {pack}",
            reply_markup=InlineKeyboardMarkup(keyboard))
        await update.message.reply_text(
            "üì® –°–∫—Ä–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É, –æ–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    elif user_id in pending_users and pending_users[user_id] == "support":
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—Å–∞–ª –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ–æ—Ç–æ ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å"
        await context.bot.send_photo(
            ADMIN_ID,
            photo=update.message.photo[-1].file_id,
            caption=
            f"üì∏ –°–æ–æ–±—â–µ–Ω–∏–µ/—Å–∫—Ä–∏–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç @{username} (ID: {user_id})",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                                     callback_data=f"replyto_{user_id}")
            ]]))
        await update.message.reply_text(
            "üì® –í–∞—à–µ —Ñ–æ—Ç–æ/—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        del pending_users[user_id]
    else:
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–º–µ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã
        await update.message.reply_text(
            "‚ùó –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª' –≤ –º–µ–Ω—é –Ω—É–∂–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞."
        )


# ================== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ reply –∫–æ–º–∞–Ω–¥–∞) ==================
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    text = update.message.text or ""
    username = user.username or "–±–µ–∑_username"

    # ---------------- user -> support: –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–æ–π ----------------
    if user_id in pending_users and pending_users[user_id] == "support":
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–µ + –∫–Ω–æ–ø–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å
        try:
            await context.bot.send_message(
                ADMIN_ID,
                f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç @{username} (ID: {user_id}):\n\n{text}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                                         callback_data=f"replyto_{user_id}")
                ]]))
            await update.message.reply_text(
                "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.")
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–¥–º–∏–Ω—É: %s", e)
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        # —É–¥–∞–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        del pending_users[user_id]
        return

    # ---------------- admin: –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ (stateful) ----------------
    if user_id == ADMIN_ID and user_id in admin_reply_state:
        target_id = admin_reply_state[user_id]
        if not text.strip():
            await update.message.reply_text(
                "‚ùó –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            return
        try:
            await context.bot.send_message(target_id, f"üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {text}")
            await update.message.reply_text(
                f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del admin_reply_state[user_id]
        return

    # ---------------- admin: –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ reply (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–∞) ----------------
    # –µ—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä—è–º–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–æ—Ç–∞, –ø—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞/–ø–æ–¥–ø–∏—Å–∏
    if user_id == ADMIN_ID and update.message.reply_to_message:
        orig = update.message.reply_to_message
        content = (orig.text or "") + "\n" + (orig.caption or "")
        m = re.search(r"ID[:\s]*([0-9]{5,})", content)
        if m:
            try:
                target = int(m.group(1))
                if not text.strip():
                    await update.message.reply_text(
                        "‚ùó –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
                    )
                    return
                await context.bot.send_message(target, f"üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {text}")
                await update.message.reply_text(
                    f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}")
            except Exception as e:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            return

    # ---------------- admin: —Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç /reply_<id> ----------------
    if text.startswith("/reply_") and user_id == ADMIN_ID:
        parts = text.split(" ", 1)
        cmd = parts[0]
        reply_text = parts[1] if len(parts) > 1 else ""
        if "_" in cmd and reply_text:
            try:
                target_id = int(cmd.replace("/reply_", ""))
                try:
                    await context.bot.send_message(
                        target_id, f"üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {reply_text}")
                    await update.message.reply_text(
                        f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
                except Exception as e:
                    await update.message.reply_text(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reply_<id> —Ç–µ–∫—Å—Ç")
        else:
            await update.message.reply_text(
                "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /reply_<id> —Ç–µ–∫—Å—Ç")
        return

    # –µ—Å–ª–∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞
    await update.message.reply_text(
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç. –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞'."
    )


# ================== –ó–ê–ü–£–°–ö ==================
def main():
    keep_alive()
    app_bot = Application.builder().token(TOKEN).build()

    app_bot.add_handler(CommandHandler("start", start))
    app_bot.add_handler(CallbackQueryHandler(button))
    app_bot.add_handler(PreCheckoutQueryHandler(precheckout))
    app_bot.add_handler(
        MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    app_bot.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app_bot.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    # reply –∫–æ–º–∞–Ω–¥–∞ —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ handle_text (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app_bot.run_polling()


if __name__ == "__main__":
    main()
