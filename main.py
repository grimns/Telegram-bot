import json
import os
import logging
import re
from threading import Thread
from flask import Flask
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, LabeledPrice
from telegram.ext import (Application, CommandHandler, CallbackQueryHandler,
                          ContextTypes, MessageHandler, filters,
                          PreCheckoutQueryHandler)

logging.basicConfig(level=logging.INFO)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8145255899:AAFQcd7SZrpvH2GVuLwxASqtg1rYYoeMHu4"
ADMIN_ID = 1758979923
STATES_FILE = "states.json"

MAIN_CHANNEL = "https://t.me/osnvkanal"
CHANNEL_LINK = "https://t.me/+52SBJ_ZOFYg2YTky"
VIP_CHANNEL_LINK = "https://t.me/+RW9AYUQMIjo0NjEy"

USDT_TRC20 = "TDiDg4tsuMdZYs7Afz1EsUR4gkkE5jJb9D"
USDT_ERC20 = "0xc5fd6eb0a1fd15eb98cb18bf5f57457fea8e50a3"
TON_ADDRESS = "UQAYWHW0rKhY9MEZ6UR4gkkE5jJb9D1rWYcC7R6f9-EA"
CRYPTOBOT_LINK = "t.me/send?start=IVmn0QryS4jg"
FKWALLET_LINK = "https://fkwallet.io/registration?partner_code=FK3223"
FKWALLET_NUMBER = "F7202565872412476"

IMAGE_URL = "https://ibb.co/hxbvxM4L"
STARS_PROVIDER_TOKEN = "STARS"  # –≤—Å—Ç–∞–≤–∏—à—å —Å–≤–æ–π

# === –¶–ï–ù–´ ===
USD_PRICES = {
    "private": {"month": 3, "year": 5, "forever": 10},
    "vip": {"month": 5, "year": 10, "forever": 15},
}
STAR_PRICES = {
    "private": {"month": 200, "year": 500, "forever": 1000},
    "vip": {"month": 500, "year": 800, "forever": 1200},
}

# === –°–û–°–¢–û–Ø–ù–ò–Ø ===
pending_users = {}
admin_reply_state = {}

def load_states():
    global pending_users, admin_reply_state
    if os.path.exists(STATES_FILE):
        with open(STATES_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            pending_users = {int(k): v for k, v in data.get("pending_users", {}).items()}
            admin_reply_state = {int(k): v for k, v in data.get("admin_reply_state", {}).items()}

def save_states():
    with open(STATES_FILE, "w", encoding="utf-8") as f:
        json.dump({
            "pending_users": {str(k): v for k, v in pending_users.items()},
            "admin_reply_state": {str(k): v for k, v in admin_reply_state.items()}
        }, f, ensure_ascii=False, indent=2)

load_states()

# === FLASK KEEP ALIVE ===
app = Flask('')

@app.route('/')
def home():
    return "Bot is running"

def run():
    app.run(host='0.0.0.0', port=3000)

def keep_alive():
    Thread(target=run, daemon=True).start()

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
def main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¶ Private", callback_data="menu_private")],
        [InlineKeyboardButton("üëë VIP Private", callback_data="menu_vip")],
        [InlineKeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ])

def duration_keyboard(prefix):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data=f"{prefix}_month")],
        [InlineKeyboardButton("–ì–æ–¥", callback_data=f"{prefix}_year")],
        [InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞", callback_data=f"{prefix}_forever")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def payment_methods_keyboard(prefix):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚≠ê –ó–≤—ë–∑–¥—ã", callback_data=f"{prefix}_stars")],
        [InlineKeyboardButton("üíé TON", callback_data=f"{prefix}_ton")],
        [InlineKeyboardButton("üíµ USDT", callback_data=f"{prefix}_usdt")],
        [InlineKeyboardButton("ü§ñ CryptoBot", callback_data=f"{prefix}_cryptobot")],
        [InlineKeyboardButton("üåç –û–ø–ª–∞—Ç–∞ –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã / –†–æ—Å—Å–∏–∏ / –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞", callback_data=f"{prefix}_countries")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def usdt_keyboard(prefix):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("USDT TRC20", callback_data=f"{prefix}_usdt_trc")],
        [InlineKeyboardButton("USDT ERC20", callback_data=f"{prefix}_usdt_erc")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def countries_keyboard(prefix):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞", callback_data=f"{prefix}_ukraine")],
        [InlineKeyboardButton("üá∑üá∫ –†–æ—Å—Å–∏—è", callback_data=f"{prefix}_russia")],
        [InlineKeyboardButton("üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω –∏ –¥—Ä—É–≥–∏–µ", callback_data=f"{prefix}_kazakhstan")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def ru_methods_keyboard(prefix):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Donat Alerts", callback_data=f"{prefix}_ru_donatalerts")],
        [InlineKeyboardButton("FK Wallet", callback_data=f"{prefix}_ru_fkwallet")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def ua_methods_keyboard(prefix):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Donatello", callback_data=f"{prefix}_uk_donatello")],
        [InlineKeyboardButton("Donat Alerts", callback_data=f"{prefix}_uk_donatalerts")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def kz_methods_keyboard(prefix):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Donat Alerts", callback_data=f"{prefix}_kz_donatalerts")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

# === –£–¢–ò–õ–ò–¢–´ ===
def get_link_for_pack(pack):
    return VIP_CHANNEL_LINK if pack.startswith("vip_") else CHANNEL_LINK

# === –°–¢–ê–†–¢ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_photo(
        photo=IMAGE_URL,
        caption=f"üì¢ –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_keyboard()
    )

# === –ö–ù–û–ü–ö–ò ===
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data == "back":
        await query.message.reply_photo(photo=IMAGE_URL, caption="üì¢ –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª:", reply_markup=main_keyboard())
        return

    if data == "support":
        pending_users[user_id] = {"state": "support"}
        save_states()
        await query.message.reply_text("üõ† –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã/—á–µ–∫ ‚Äî –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤.")
        return

    m = re.match(r"^(private|vip)_(month|year|forever)$", data)
    if m:
        prefix = f"{m.group(1)}_{m.group(2)}"
        await query.message.reply_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_methods_keyboard(prefix))
        return

    # ========== –û–ü–õ–ê–¢–´ ==========
    # Stars
    m = re.match(r"^(private|vip)_(month|year|forever)_stars$", data)
    if m:
        base, dur = m.group(1), m.group(2)
        amount = STAR_PRICES[base][dur]
        await context.bot.send_invoice(
            chat_id=user_id,
            title=f"{base.capitalize()} ({dur})",
            description="–ü–æ–∫—É–ø–∫–∞ –ø—Ä–∏–≤–∞—Ç-–¥–æ—Å—Ç—É–ø–∞",
            payload=f"{base}_{dur}_stars",
            provider_token=STARS_PROVIDER_TOKEN,
            currency="XTR",
            prices=[LabeledPrice("–î–æ—Å—Ç—É–ø", amount)],
        )
        return

    # TON
    m = re.match(r"^(private|vip)_(month|year|forever)_ton$", data)
    if m:
        await query.message.reply_text(f"üíé –û–ø–ª–∞—Ç–∞ TON:\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ –∞–¥—Ä–µ—Å:\n`{TON_ADDRESS}`\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª.",
                                       reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")]]),
                                       parse_mode="Markdown")
        return

    # USDT
    m = re.match(r"^(private|vip)_(month|year|forever)_usdt$", data)
    if m:
        await query.message.reply_text("üíµ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è USDT:", reply_markup=usdt_keyboard(f"{m.group(1)}_{m.group(2)}"))
        return

    # CryptoBot
    m = re.match(r"^(private|vip)_(month|year|forever)_cryptobot$", data)
    if m:
        await query.message.reply_text(f"ü§ñ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot:\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ {CRYPTOBOT_LINK}\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª.",
                                       reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")]]))
        return

    # Countries
    m = re.match(r"^(private|vip)_(month|year|forever)_countries$", data)
    if m:
        await query.message.reply_text("üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=countries_keyboard(f"{m.group(1)}_{m.group(2)}"))
        return

    # –£–∫—Ä–∞–∏–Ω–∞
    m = re.match(r"^(private|vip)_(month|year|forever)_ukraine$", data)
    if m:
        await query.message.reply_text("üá∫üá¶ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=ua_methods_keyboard(f"{m.group(1)}_{m.group(2)}"))
        return

    # –†–æ—Å—Å–∏—è
    m = re.match(r"^(private|vip)_(month|year|forever)_russia$", data)
    if m:
        await query.message.reply_text("üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=ru_methods_keyboard(f"{m.group(1)}_{m.group(2)}"))
        return

    # –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
    m = re.match(r"^(private|vip)_(month|year|forever)_kazakhstan$", data)
    if m:
        await query.message.reply_text("üá∞üáø –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kz_methods_keyboard(f"{m.group(1)}_{m.group(2)}"))
        return

    # FK Wallet (–†–æ—Å—Å–∏—è)
    if data.endswith("_ru_fkwallet"):
        await query.message.reply_text(
            f"üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ FK Wallet:\n"
            f"1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ {FKWALLET_LINK}\n"
            f"2Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –≤ –∫–∞–±–∏–Ω–µ—Ç ‚Üí –ö–æ—à–µ–ª—ë–∫ ‚Üí –†—É–±–ª–∏ ‚Üí –í—ã–≤–æ–¥\n"
            f"3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: `{FKWALLET_NUMBER}`\n"
            f"4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª¬ª",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")]])
        )
        return

    # –ü–æ—Å–ª–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª"
    if data == "paid":
        pending_users[user_id] = {"state": "awaiting_screenshot"}
        save_states()
        await query.message.reply_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã/—á–µ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É ‚Äî –æ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤ –∏ –≤—ã–¥–∞—Å—Ç –≤–∞–º —Å—Å—ã–ª–∫—É.")
        return

# === –°–û–û–ë–©–ï–ù–ò–Ø ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in pending_users:
        state = pending_users[user_id]["state"]
        if state == "support" or state == "awaiting_screenshot":
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{update.message.from_user.username or '–ë–µ–∑ –Ω–∏–∫–∞'} ({user_id}):"
            )
            if update.message.photo:
                await update.message.photo[-1].get_file().download_to_drive(f"screenshot_{user_id}.jpg")
                await context.bot.send_photo(chat_id=ADMIN_ID, photo=open(f"screenshot_{user_id}.jpg", "rb"))
                os.remove(f"screenshot_{user_id}.jpg")
            else:
                await context.bot.send_message(chat_id=ADMIN_ID, text=update.message.text)
            await context.bot.send_message(chat_id=ADMIN_ID,
                                           text="–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:",
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}")]]))
            await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É!")
            del pending_users[user_id]
            save_states()

# === –ê–î–ú–ò–ù –û–¢–í–ï–¢ ===
async def admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    admin_id = query.from_user.id
    if admin_id != ADMIN_ID:
        return
    m = re.match(r"reply_(\d+)", query.data)
    if m:
        uid = int(m.group(1))
        admin_reply_state[admin_id] = uid
        save_states()
        await query.message.reply_text(f"üí¨ –ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}:")
        return

async def admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = update.message.from_user.id
    if admin_id == ADMIN_ID and admin_id in admin_reply_state:
        uid = admin_reply_state[admin_id]
        await context.bot.send_message(chat_id=uid, text=f"üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {update.message.text}")
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        del admin_reply_state[admin_id]
        save_states()

# === MAIN ===
def main():
    keep_alive()
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(CallbackQueryHandler(admin_reply, pattern="^reply_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.PHOTO, handle_message))
    app.add_handler(MessageHandler(filters.TEXT & filters.User(ADMIN_ID), admin_message))
    app.run_polling()

if __name__ == "__main__":
    main()
