# main.py ‚Äî –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (–≤—Å–µ –∫–Ω–æ–ø–∫–∏, —Å—Ç—Ä–∞–Ω—ã ‚Äî —Ä–∞–±–æ—á–∏–µ)
import json
import os
import logging
import re
from threading import Thread
from flask import Flask

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
    LabeledPrice
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    PreCheckoutQueryHandler
)

logging.basicConfig(level=logging.INFO)

# --------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤—Å—Ç–∞–≤—å —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è) ----------------
TOKEN = "8145255899:AAFQcd7SZrpvH2GVuLwxASqtg1rYYoeMHu4"  # <- –≤—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω
ADMIN_ID = 1758979923                                    # <- –≤—Å—Ç–∞–≤—å —Å–≤–æ–π ID
STATES_FILE = "states.json"
STARS_PROVIDER_TOKEN = "provider.stars"                  # <- –≤—Å—Ç–∞–≤–∏—à—å —Å–≤–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è invoice
# -----------------------------------------------------------------

# –°—Å—ã–ª–∫–∏/–∫–æ—à–µ–ª—å–∫–∏/–∫–∞—Ä—Ç–∏–Ω–∫–∞
MAIN_CHANNEL = "https://t.me/osnvkanal"
CHANNEL_LINK = "https://t.me/+52SBJ_ZOFYg2YTky"
VIP_CHANNEL_LINK = "https://t.me/+RW9AYUQMIjo0NjEy"

USDT_TRC20 = "TDiDg4tsuMdZYs7Afz1EsUR4gkkE5jJb9D"
USDT_ERC20 = "0xc5fd6eb0a1fd15eb98cb18bf5f57457fea8e50a3"
TON_ADDRESS = "UQAYWHW0rKhY9MEZ6UR5pn76YUJTZtlb3D1rWYcC7R6f9-EA"
CRYPTOBOT_LINK = "t.me/send?start=IVmn0QryS4jg"

DONATELLO_LINK = "https://donatello.to/Gromn"
DONATALERTS_LINK = "https://www.donationalerts.com/r/gromn"
FKWALLET_LINK = "https://fkwallet.io/registration?partner_code=FK3223"
FKWALLET_NUMBER = "F7202565872412476"

IMAGE_URL = "https://ibb.co/hxbvxM4L"

# –¶–µ–Ω—ã
STARS_PRICES = {
    "private": {"month": 200, "year": 500, "forever": 1000},
    "vip": {"month": 500, "year": 800, "forever": 1200},
}
USD_PRICES = {
    "private": {"month": 3, "year": 5, "forever": 10},
    "vip": {"month": 5, "year": 10, "forever": 15},
}

# –í –ø–∞–º—è—Ç–∏
pending_users = {}     # {user_id: {'state': 'awaiting_screenshot'|'support', 'pack': 'private_month', 'method': '...'}}
admin_reply_state = {} # {admin_id: target_user_id}

# ---------------- states handling ----------------
def load_states():
    global pending_users, admin_reply_state
    if not os.path.exists(STATES_FILE):
        pending_users = {}
        admin_reply_state = {}
        return
    try:
        with open(STATES_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            pending_users = {int(k): v for k, v in data.get("pending_users", {}).items()}
            admin_reply_state = {int(k): v for k, v in data.get("admin_reply_state", {}).items()}
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å states.json: %s", e)
        pending_users = {}
        admin_reply_state = {}

def save_states():
    try:
        tmp = STATES_FILE + ".tmp"
        data = {
            "pending_users": {str(k): v for k, v in pending_users.items()},
            "admin_reply_state": {str(k): v for k, v in admin_reply_state.items()}
        }
        with open(tmp, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        os.replace(tmp, STATES_FILE)
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å states.json: %s", e)

load_states()

# ---------------- keep-alive ----------------
app = Flask('')

@app.route('/')
def home():
    return "Bot is running"

def run():
    app.run(host='0.0.0.0', port=3000)

def keep_alive():
    t = Thread(target=run, daemon=True)
    t.start()

# ---------------- Keyboards ----------------
def main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¶ Private", callback_data="menu_private")],
        [InlineKeyboardButton("üëë VIP Private", callback_data="menu_vip")],
        [InlineKeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
    ])

def duration_keyboard(prefix: str):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data=f"{prefix}_month")],
        [InlineKeyboardButton("–ì–æ–¥", callback_data=f"{prefix}_year")],
        [InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞", callback_data=f"{prefix}_forever")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
    ])

def payment_methods_keyboard(prefix_pack: str):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚≠ê –ó–≤—ë–∑–¥—ã", callback_data=f"{prefix_pack}_stars")],
        [InlineKeyboardButton("üíé TON", callback_data=f"{prefix_pack}_ton")],
        [InlineKeyboardButton("üíµ USDT", callback_data=f"{prefix_pack}_usdt")],
        [InlineKeyboardButton("ü§ñ CryptoBot", callback_data=f"{prefix_pack}_cryptobot")],
        [InlineKeyboardButton("üåç –û–ø–ª–∞—Ç–∞ –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã/–†–æ—Å—Å–∏–∏/–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞", callback_data=f"{prefix_pack}_countries")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
    ])

def usdt_network_keyboard(prefix_pack: str):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("USDT TRC20", callback_data=f"{prefix_pack}_usdt_trc")],
        [InlineKeyboardButton("USDT ERC20", callback_data=f"{prefix_pack}_usdt_erc")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
    ])

def countries_keyboard(prefix_pack: str):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞", callback_data=f"{prefix_pack}_country_ukraine")],
        [InlineKeyboardButton("üá∑üá∫ –†–æ—Å—Å–∏—è", callback_data=f"{prefix_pack}_country_russia")],
        [InlineKeyboardButton("üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", callback_data=f"{prefix_pack}_country_kaz")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
    ])

def ukraine_methods_keyboard(prefix_pack: str):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Donatello", callback_data=f"{prefix_pack}_uk_donatello")],
        [InlineKeyboardButton("Donation Alerts", callback_data=f"{prefix_pack}_uk_donatalerts")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
    ])

def russia_methods_keyboard(prefix_pack: str):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Donation Alerts", callback_data=f"{prefix_pack}_ru_donatalerts")],
        [InlineKeyboardButton("FK Wallet", callback_data=f"{prefix_pack}_ru_fkwallet")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
    ])

def kazakh_methods_keyboard(prefix_pack: str):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Donation Alerts", callback_data=f"{prefix_pack}_kz_donatalerts")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
    ])

# ---------------- Helpers ----------------
def pack_is_vip(pack: str) -> bool:
    return pack.startswith("vip_")

def get_channel_link_for_pack(pack: str) -> str:
    return VIP_CHANNEL_LINK if pack_is_vip(pack) else CHANNEL_LINK

def price_display(base, dur):
    usd = USD_PRICES[base][dur]
    conv = {3: {"uah": 125, "rub": 280}, 5: {"uah": 210, "rub": 470}, 10: {"uah": 420, "rub": 940}, 15: {"uah": 630, "rub": 1410}}
    vals = conv.get(usd, {"uah": int(usd*42), "rub": int(usd*93)})
    return f"{vals['uah']}‚Ç¥ / {vals['rub']}‚ÇΩ / ${usd}"

# ---------------- Handlers ----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_photo(photo=IMAGE_URL,
                                        caption=f"üì¢ –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                                        reply_markup=main_keyboard())
    elif update.callback_query:
        await update.callback_query.message.reply_photo(photo=IMAGE_URL,
                                                        caption=f"üì¢ –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                                                        reply_markup=main_keyboard())

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user = query.from_user
    user_id = user.id
    username = user.username or f"id{user_id}"

    # Back to main
    if data == "back":
        await query.message.reply_photo(photo=IMAGE_URL,
                                        caption=(f"üì¢ –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"),
                                        reply_markup=main_keyboard())
        return

    # Support
    if data == "support":
        pending_users[user_id] = {"state": "support"}
        save_states()
        await query.message.reply_text("üõ† –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ/–ø—Ä–∏—à–ª–∏—Ç–µ –æ–ø–ª–∞—Ç—ã/—á–µ–∫–∞. –ú—ã –ø–µ—Ä–µ—à–ª—ë–º –µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.")
        return

    # Main menu buttons
    if data == "menu_private" or data == "menu_vip":
        prefix = "private" if data == "menu_private" else "vip"
        await query.message.reply_text(f"–í—ã–±—Ä–∞–Ω: {prefix.title()}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫:", reply_markup=duration_keyboard(prefix))
        return

    # Durations -> payment methods
    m = re.match(r"^(private|vip)_(month|year|forever)$", data)
    if m:
        base, dur = m.group(1), m.group(2)
        prefix_pack = f"{base}_{dur}"
        await query.message.reply_text(f"–ü–∞–∫–µ—Ç: {base.title()} | –°—Ä–æ–∫: {dur}\n–¶–µ–Ω–∞: {price_display(base,dur)}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_methods_keyboard(prefix_pack))
        return

    # Stars invoice
    m = re.match(r"^(private|vip)_(month|year|forever)_stars$", data)
    if m:
        base, dur = m.group(1), m.group(2)
        stars_amount = STARS_PRICES[base][dur]
        prices = [LabeledPrice("–ó–≤—ë–∑–¥—ã", stars_amount)]
        payload = f"{base}_{dur}_stars"
        try:
            await query.message.reply_invoice(
                title=f"{base.title()} {dur} ‚Äî –ó–≤—ë–∑–¥—ã",
                description=f"–ü–æ–∫—É–ø–∫–∞ {stars_amount}‚≠ê –¥–ª—è {base} ({dur})",
                payload=payload,
                provider_token=STARS_PROVIDER_TOKEN,
                currency="XTR",
                prices=prices,
                start_parameter=payload
            )
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ invoice: %s", e)
            await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ provider token.")
        return

    # TON
    m = re.match(r"^(private|vip)_(month|year|forever)_ton$", data)
    if m:
        base, dur = m.group(1), m.group(2)
        prefix = f"{base}_{dur}"
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{prefix}_ton")],[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])
        await query.message.reply_text(f"üíé –û–ø–ª–∞—Ç–∞ TON\n–°—É–º–º–∞: {price_display(base,dur)}\n–ê–¥—Ä–µ—Å: `{TON_ADDRESS}`\n\n.", parse_mode="Markdown", reply_markup=kb)
        return

    # USDT -> choose network
    m = re.match(r"^(private|vip)_(month|year|forever)_usdt$", data)
    if m:
        prefix = f"{m.group(1)}_{m.group(2)}"
        await query.message.reply_text("üíµ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å USDT:", reply_markup=usdt_network_keyboard(prefix))
        return

    # USDT TRC
    m = re.match(r"^(private|vip)_(month|year|forever)_usdt_trc$", data)
    if m:
        base,dur = m.group(1), m.group(2)
        prefix = f"{base}_{dur}"
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{prefix}_usdt_trc")],[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])
        await query.message.reply_text(f"USDT TRC20\n–ê–¥—Ä–µ—Å: `{USDT_TRC20}`\n–°—É–º–º–∞: {price_display(base,dur)}\n\n.", parse_mode="Markdown", reply_markup=kb)
        return

    # USDT ERC
    m = re.match(r"^(private|vip)_(month|year|forever)_usdt_erc$", data)
    if m:
        base,dur = m.group(1), m.group(2)
        prefix = f"{base}_{dur}"
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{prefix}_usdt_erc")],[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])
        await query.message.reply_text(f"USDT ERC20\n–ê–¥—Ä–µ—Å: `{USDT_ERC20}`\n–°—É–º–º–∞: {price_display(base,dur)}\n\n.", parse_mode="Markdown", reply_markup=kb)
        return

    # CryptoBot
    m = re.match(r"^(private|vip)_(month|year|forever)_cryptobot$", data)
    if m:
        base,dur = m.group(1), m.group(2)
        prefix = f"{base}_{dur}"
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ CryptoBot", url=(CRYPTOBOT_LINK if CRYPTOBOT_LINK.startswith("http") else "https://"+CRYPTOBOT_LINK)) ,[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{prefix}_cryptobot")],[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])
        await query.message.reply_text(f"–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot\n–°—É–º–º–∞: {price_display(base,dur)}\n\n.", reply_markup=kb)
        return

    # Countries menu
    m = re.match(r"^(private|vip)_(month|year|forever)_countries$", data)
    if m:
        prefix = f"{m.group(1)}_{m.group(2)}"
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=countries_keyboard(prefix))
        return

    # Country handlers (exact match to what keyboard produced)
    m = re.match(r"^(private|vip)_(month|year|forever)_country_(ukraine|russia|kaz)$", data)
    if m:
        base, dur, country = m.group(1), m.group(2), m.group(3)
        prefix = f"{base}_{dur}"
        if country == "ukraine":
            await query.message.reply_text("–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã:", reply_markup=ukraine_methods_keyboard(prefix))
        elif country == "russia":
            await query.message.reply_text("–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è –†–æ—Å—Å–∏–∏:", reply_markup=russia_methods_keyboard(prefix))
        else:
            await query.message.reply_text("–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞:", reply_markup=kazakh_methods_keyboard(prefix))
        return

    # Ukraine Donatello
    m = re.match(r"^(private|vip)_(month|year|forever)_uk_donatello$", data)
    if m:
        base,dur = m.group(1), m.group(2)
        prefix = f"{base}_{dur}"
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ Donatello", url=DONATELLO_LINK)],[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{prefix}_uk_donatello")],[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])
        await query.message.reply_text(f"Donatello ‚Äî –°—É–º–º–∞: {price_display(base,dur)}\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏.", reply_markup=kb)
        return

    # Ukraine DonationAlerts
    m = re.match(r"^(private|vip)_(month|year|forever)_uk_donatalerts$", data)
    if m:
        base,dur = m.group(1), m.group(2)
        prefix = f"{base}_{dur}"
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ DonationAlerts", url=DONATALERTS_LINK)],[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{prefix}_uk_donatalerts")],[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])
        await query.message.reply_text(f"DonationAlerts ‚Äî –°—É–º–º–∞: {price_display(base,dur)}", reply_markup=kb)
        return

    # Russia DonationAlerts
    m = re.match(r"^(private|vip)_(month|year|forever)_ru_donatalerts$", data)
    if m:
        base,dur = m.group(1), m.group(2)
        prefix = f"{base}_{dur}"
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ DonationAlerts", url=DONATALERTS_LINK)],[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{prefix}_ru_donatalerts")],[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])
        await query.message.reply_text(f"DonationAlerts ‚Äî –°—É–º–º–∞: {price_display(base,dur)}", reply_markup=kb)
        return

    # Russia FK Wallet (URL + instruction)
    m = re.match(r"^(private|vip)_(month|year|forever)_ru_fkwallet$", data)
    if m:
        base,dur = m.group(1), m.group(2)
        prefix = f"{base}_{dur}"
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ FK Wallet", url=FKWALLET_LINK)],[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{prefix}_ru_fkwallet")],[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])
        instr = (f"üí≥ FK Wallet\n–°—É–º–º–∞: {price_display(base,dur)}\n\n"
                 f"1) –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {FKWALLET_LINK}\n"
                 "2) –í –∫–∞–±–∏–Ω–µ—Ç–µ: –ö–æ—à–µ–ª—ë–∫ ‚Üí –†—É–±–ª–∏ ‚Üí –í—ã–≤–æ–¥\n"
                 f"3) –í—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä: `{FKWALLET_NUMBER}`\n"
                 "4) –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥\n\n")
        await query.message.reply_text(instr, parse_mode="Markdown", reply_markup=kb)
        return

    # Kazakhstan DonationAlerts
    m = re.match(r"^(private|vip)_(month|year|forever)_kz_donatalerts$", data)
    if m:
        base,dur = m.group(1), m.group(2)
        prefix = f"{base}_{dur}"
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ DonationAlerts", url=DONATALERTS_LINK)],[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{prefix}_kz_donatalerts")],[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])
        await query.message.reply_text(f"DonationAlerts (–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω) ‚Äî –°—É–º–º–∞: {price_display(base,dur)}", reply_markup=kb)
        return

    # ======= –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–Ø –æ–ø–ª–∞—Ç–∏–ª" (–ª—é–±–æ–π –ø—É—Ç—å) =======
    if data.startswith("paid_") or data == "paid":
        payload = data.replace("paid_", "") if data.startswith("paid_") else ""
        parts = payload.split("_") if payload else []
        if len(parts) >= 2:
            pack = f"{parts[0]}_{parts[1]}"
            method = "_".join(parts[2:]) if len(parts) > 2 else "manual"
        else:
            pack = "unknown_unknown"
            method = "manual"
        pending_users[user_id] = {"state": "awaiting_screenshot", "pack": pack, "method": method}
        save_states()
        await query.message.reply_text("‚úÖ –ù–∞–∂–∞—Ç–æ: '–Ø –æ–ø–ª–∞—Ç–∏–ª'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∏–Ω—å—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã/—á–µ–∫–∞ ‚Äî –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –≤—ã–¥–∞—Å—Ç —Å—Å—ã–ª–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤.")
        try:
            await context.bot.send_message(
                ADMIN_ID,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) –æ—Ç–º–µ—Ç–∏–ª –æ–ø–ª–∞—Ç—É: {pack} | —Å–ø–æ—Å–æ–±: {method}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"–í—ã–¥–∞—Ç—å —Å—Å—ã–ª–∫—É @{username}", callback_data=f"give_{user_id}")],[InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"replyto_{user_id}")]])
            )
        except Exception as e:
            logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: %s", e)
        return

    # ADMIN: give link
    if data.startswith("give_"):
        if user_id != ADMIN_ID:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
            return
        try:
            target_id = int(data.split("_",1)[1])
        except Exception:
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.", show_alert=True)
            return
        if target_id in pending_users:
            info = pending_users[target_id]
            pack = info.get("pack","private_month")
            link = get_channel_link_for_pack(pack)
            try:
                await context.bot.send_message(target_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:\n{link}")
                await query.answer(f"–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
                del pending_users[target_id]
                save_states()
            except Exception as e:
                logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %s", e)
                await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", show_alert=True)
        else:
            await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç.", show_alert=True)
        return

    # ADMIN: replyto_ -> set state to reply
    if data.startswith("replyto_"):
        if user_id != ADMIN_ID:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
            return
        try:
            uid = int(data.split("_",1)[1])
            admin_reply_state[user_id] = uid
            save_states()
            await query.message.reply_text(f"‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}.")
        except Exception:
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.", show_alert=True)
        return

    await query.answer()

# Precheckout (invoice)
async def precheckout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)

# Successful invoice payment (stars)
async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment = update.message.successful_payment
    user_id = update.message.from_user.id
    payload = payment.invoice_payload
    if payload and payload.endswith("_stars"):
        if "vip" in payload:
            link = VIP_CHANNEL_LINK
        else:
            link = CHANNEL_LINK
        try:
            await update.message.reply_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:\n{link}")
            await context.bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{update.message.from_user.username or user_id} (ID: {user_id}) –æ–ø–ª–∞—Ç–∏–ª (stars) {payload}")
        except Exception:
            pass

# Handle photo (screenshots)
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    username = user.username or f"id{user_id}"
    if user_id in pending_users:
        state = pending_users[user_id].get("state")
        if state == "awaiting_screenshot":
            info = pending_users[user_id]
            pack = info.get("pack","unknown")
            method = info.get("method","unknown")
            caption = f"üì∏ –°–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã/—á–µ–∫–∞ –æ—Ç @{username} (ID: {user_id})\n–ü–∞–∫–µ—Ç: {pack}\n–ú–µ—Ç–æ–¥: {method}\nID: {user_id}"
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(f"–í—ã–¥–∞—Ç—å —Å—Å—ã–ª–∫—É @{username}", callback_data=f"give_{user_id}")],[InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"replyto_{user_id}")]])
            try:
                await context.bot.send_photo(ADMIN_ID, photo=update.message.photo[-1].file_id, caption=caption, reply_markup=keyboard)
                await update.message.reply_text("üì® –°–∫—Ä–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É, –æ–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¥–æ 2 —á–∞—Å–æ–≤).")
            except Exception as e:
                logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–∫—Ä–∏–Ω–∞ –∞–¥–º–∏–Ω—É: %s", e)
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        elif state == "support":
            try:
                await context.bot.send_photo(ADMIN_ID, photo=update.message.photo[-1].file_id, caption=f"üì∏ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç @{username} (ID: {user_id})", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"replyto_{user_id}")]]))
                await update.message.reply_text("üì® –í–∞—à–µ —Ñ–æ—Ç–æ/—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            except Exception as e:
                logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–¥–º–∏–Ω—É: %s", e)
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            try:
                del pending_users[user_id]; save_states()
            except KeyError:
                pass
            return
    await update.message.reply_text("‚ùó –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã/—á–µ–∫–∞ ‚Äî —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª' –≤ –º–µ–Ω—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞. –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞–∂–º–∏—Ç–µ 'üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞'.")

# Handle text (support/admin replies)
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    text = update.message.text or ""
    username = user.username or f"id{user_id}"

    # user -> support
    if user_id in pending_users and pending_users[user_id].get("state") == "support":
        try:
            await context.bot.send_message(ADMIN_ID, f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç @{username} (ID: {user_id}):\n\n{text}", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"replyto_{user_id}")]]))
            await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.")
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–¥–º–∏–Ω—É: %s", e)
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        try:
            del pending_users[user_id]; save_states()
        except KeyError:
            pass
        return

    # admin: stateful reply (after clicking replyto_)
    if user_id == ADMIN_ID and user_id in admin_reply_state:
        target_id = admin_reply_state[user_id]
        if not text.strip():
            await update.message.reply_text("‚ùó –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            return
        try:
            await context.bot.send_message(target_id, f"üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n\n{text}")
            await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        try:
            del admin_reply_state[user_id]; save_states()
        except KeyError:
            pass
        return

    # admin reply by replying to bot message (parse ID)
    if user_id == ADMIN_ID and update.message.reply_to_message:
        orig = update.message.reply_to_message
        content = (orig.text or "") + "\n" + (orig.caption or "")
        m = re.search(r"ID[:\s]*([0-9]{5,})", content)
        if m:
            try:
                target = int(m.group(1))
                if not text.strip():
                    await update.message.reply_text("‚ùó –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                    return
                await context.bot.send_message(target, f"üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n\n{text}")
                await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            return

    # admin old style /reply_<id>
    if text.startswith("/reply_") and user_id == ADMIN_ID:
        parts = text.split(" ", 1)
        cmd = parts[0]
        reply_text = parts[1] if len(parts) > 1 else ""
        if "_" in cmd and reply_text:
            try:
                target_id = int(cmd.replace("/reply_", ""))
                try:
                    await context.bot.send_message(target_id, f"üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n\n{reply_text}")
                    await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
                except Exception as e:
                    await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reply_<id> —Ç–µ–∫—Å—Ç")
        else:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /reply_<id> —Ç–µ–∫—Å—Ç")
        return

    # default
    await update.message.reply_text("–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start. –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ‚Äî –Ω–∞–∂–º–∏—Ç–µ 'üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞'.")

# ---------------- Run ----------------
def main():
    load_states()
    keep_alive()
    if TOKEN.startswith("<") or ADMIN_ID == 0:
        print("ERROR: –í—Å—Ç–∞–≤—å TOKEN –∏ ADMIN_ID –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
        return

    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(PreCheckoutQueryHandler(precheckout))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
