import json
import os
import logging
import re
from threading import Thread
from flask import Flask

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ContextTypes, MessageHandler, filters
)

logging.basicConfig(level=logging.INFO)

# --- –¢–í–û–ò –î–ê–ù–ù–´–ï ---
TOKEN = "8145255899:AAFQcd7SZrpvH2GVuLwxASqtg1rYYoeMHu4"  
ADMIN_ID = 1758979923
STATES_FILE = "states.json"

MAIN_CHANNEL = "https://t.me/osnvkanal"
CHANNEL_LINK = "https://t.me/+52SBJ_ZOFYg2YTky"
VIP_CHANNEL_LINK = "https://t.me/+RW9AYUQMIjo0NjEy"

USDT_TRC20 = "TDiDg4tsuMdZYs7Afz1EsUR4gkkE5jJb9D"
USDT_ERC20 = "0xc5fd6eb0a1fd15eb98cb18bf5f57457fea8e50a3"
TON_ADDRESS = "UQAYWHW0rKhY9MEZ6UR5pn76YUJTZtlb3D1rWYcC7R6f9-EA"
CRYPTOBOT_LINK = "t.me/send?start=IVmn0QryS4jg"

DONATELLO_LINK = "https://donatello.to/Gromn"
DONATALERTS_LINK = "https://www.donationalerts.com/r/gromn"
FKWALLET_LINK = "https://fkwallet.io/registration?partner_code=FK3223"
FKWALLET_NUMBER = "F7202565872412476"

IMAGE_URL = "https://ibb.co/hxbvxM4L"

# --- –¶–ï–ù–´ ---
USD_PRICES = {
    "private": {"month": 3, "year": 5, "forever": 10},
    "vip": {"month": 5, "year": 10, "forever": 15},
}

# --- –°–¢–ê–ù ---
pending_users = {}
admin_reply_state = {}

# --- –†–∞–±–æ—Ç–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ ---
def load_states():
    global pending_users, admin_reply_state
    if os.path.exists(STATES_FILE):
        try:
            with open(STATES_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                pending_users = {int(k): v for k, v in data.get("pending_users", {}).items()}
                admin_reply_state = {int(k): v for k, v in data.get("admin_reply_state", {}).items()}
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ states.json: %s", e)

def save_states():
    try:
        data = {
            "pending_users": {str(k): v for k, v in pending_users.items()},
            "admin_reply_state": {str(k): v for k, v in admin_reply_state.items()},
        }
        with open(STATES_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è states.json: %s", e)

load_states()

# --- Flask keep-alive ---
app = Flask('')

@app.route('/')
def home():
    return "Bot is running"

def run(): app.run(host='0.0.0.0', port=3000)
def keep_alive(): Thread(target=run, daemon=True).start()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¶ Private", callback_data="menu_private")],
        [InlineKeyboardButton("üëë VIP Private", callback_data="menu_vip")],
        [InlineKeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
    ])

def duration_keyboard(prefix):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data=f"{prefix}_month")],
        [InlineKeyboardButton("–ì–æ–¥", callback_data=f"{prefix}_year")],
        [InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞", callback_data=f"{prefix}_forever")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def payment_methods_keyboard(prefix_pack):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚≠ê –ó–≤—ë–∑–¥—ã", callback_data=f"{prefix_pack}_stars")],
        [InlineKeyboardButton("üíé TON", callback_data=f"{prefix_pack}_ton")],
        [InlineKeyboardButton("üíµ USDT", callback_data=f"{prefix_pack}_usdt")],
        [InlineKeyboardButton("ü§ñ CryptoBot", callback_data=f"{prefix_pack}_cryptobot")],
        [InlineKeyboardButton("üåç –£–∫—Ä–∞–∏–Ω–∞ / –†–æ—Å—Å–∏—è / –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", callback_data=f"{prefix_pack}_countries")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def usdt_network_keyboard(prefix_pack):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("USDT (TRC20)", callback_data=f"{prefix_pack}_usdt_trc")],
        [InlineKeyboardButton("USDT (ERC20)", callback_data=f"{prefix_pack}_usdt_erc")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def countries_keyboard(prefix_pack):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞", callback_data=f"{prefix_pack}_country_ukraine")],
        [InlineKeyboardButton("üá∑üá∫ –†–æ—Å—Å–∏—è", callback_data=f"{prefix_pack}_country_russia")],
        [InlineKeyboardButton("üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", callback_data=f"{prefix_pack}_country_kazakhstan")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def russia_methods_keyboard(prefix_pack):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Donat Alerts", callback_data=f"{prefix_pack}_ru_donatalerts")],
        [InlineKeyboardButton("FK Wallet", callback_data=f"{prefix_pack}_ru_fkwallet")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{prefix_pack}_countries")]
    ])

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def get_channel_link(pack):
    return VIP_CHANNEL_LINK if pack.startswith("vip_") else CHANNEL_LINK

# --- /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_photo(IMAGE_URL, caption=f"üì¢ –ù–∞—à –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}", reply_markup=main_keyboard())

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    # –ù–∞–∑–∞–¥
    if data == "back":
        await query.message.reply_photo(IMAGE_URL, caption=f"üì¢ –ù–∞—à –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}", reply_markup=main_keyboard())
        return

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞
    if data == "support":
        pending_users[user_id] = {"state": "support"}
        save_states()
        await query.message.reply_text("üõ† –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–∫–∏–Ω—å—Ç–µ —Å–∫—Ä–∏–Ω –∏–≥—Ä—ã ‚Äî –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç.")
        return

    # –ú–µ–Ω—é
    if data == "menu_private":
        await query.message.reply_text("üì¶ Private ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫:", reply_markup=duration_keyboard("private"))
        return
    if data == "menu_vip":
        await query.message.reply_text("üëë VIP Private ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫:", reply_markup=duration_keyboard("vip"))
        return

    # –°—Ä–æ–∫ -> –æ–ø–ª–∞—Ç–∞
    m = re.match(r"^(private|vip)_(month|year|forever)$", data)
    if m:
        base, dur = m.groups()
        prefix_pack = f"{base}_{dur}"
        usd = USD_PRICES[base][dur]
        await query.message.reply_text(f"üí∞ –¶–µ–Ω–∞: {usd}$\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_methods_keyboard(prefix_pack))
        return

    # --- USDT ---
    if data.endswith("_usdt"):
        await query.message.reply_text("üíµ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å USDT:", reply_markup=usdt_network_keyboard(data))
        return
    if data.endswith("_usdt_trc"):
        await query.message.reply_text(f"üíµ –û—Ç–ø—Ä–∞–≤—å—Ç–µ USDT (TRC20): `{USDT_TRC20}`", parse_mode="Markdown")
        return
    if data.endswith("_usdt_erc"):
        await query.message.reply_text(f"üíµ –û—Ç–ø—Ä–∞–≤—å—Ç–µ USDT (ERC20): `{USDT_ERC20}`", parse_mode="Markdown")
        return

    # --- TON ---
    if data.endswith("_ton"):
        await query.message.reply_text(f"üíé –ê–¥—Ä–µ—Å TON: `{TON_ADDRESS}`", parse_mode="Markdown")
        return

    # --- CryptoBot ---
    if data.endswith("_cryptobot"):
        await query.message.reply_text(f"ü§ñ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot:\n{CRYPTOBOT_LINK}")
        return

    # --- –£–∫—Ä–∞–∏–Ω–∞ / –†–æ—Å—Å–∏—è / –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω ---
    if data.endswith("_countries"):
        await query.message.reply_text("üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=countries_keyboard(data))
        return

    if data.endswith("_country_russia"):
        await query.message.reply_text("üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=russia_methods_keyboard(data))
        return

    # --- FK Wallet ---
    if data.endswith("_ru_fkwallet"):
        text = (
            "üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ FK Wallet\n\n"
            f"1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {FKWALLET_LINK}\n"
            "2Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –≤ –∫–∞–±–∏–Ω–µ—Ç\n"
            "3Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ: ¬´–ö–æ—à–µ–ª—ë–∫¬ª ‚Üí ¬´–†—É–±–ª–∏¬ª ‚Üí ¬´–í—ã–≤–æ–¥¬ª\n"
            f"4Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä: `{FKWALLET_NUMBER}`\n"
            "5Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ.\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã/—á–µ–∫–∞ ‚Äî –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤."
        )
        await query.message.reply_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"{data}_confirm")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{data}_country_russia")]
        ]))
        return

# --- –°–æ–æ–±—â–µ–Ω–∏—è ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in pending_users and pending_users[user_id].get("state") == "support":
        await context.bot.send_message(
            ADMIN_ID,
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{update.message.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'} ({user_id}):\n{update.message.text or ''}"
        )
        await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.")
        pending_users.pop(user_id, None)
        save_states()

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    keep_alive()
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()
