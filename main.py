import json
import os
import logging
import re
from threading import Thread
from flask import Flask
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, LabeledPrice
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes, PreCheckoutQueryHandler
)

logging.basicConfig(level=logging.INFO)

# -------------------- –ù–ê–°–¢–†–û–ô–ö–ò --------------------
TOKEN = "8145255899:AAFQcd7SZrpvH2GVuLwxASqtg1rYYoeMHu4"
ADMIN_ID = 1758979923
STARS_PROVIDER_TOKEN = "STARS"

IMAGE_URL = "https://ibb.co/hxbvxM4L"
MAIN_CHANNEL = "https://t.me/osnvkanal"
CHANNEL_LINK = "https://t.me/+52SBJ_ZOFYg2YTky"
VIP_CHANNEL_LINK = "https://t.me/+RW9AYUQMIjo0NjEy"

USDT_TRC20 = "TDiDg4tsuMdZYs7Afz1EsUR4gkkE5jJb9D"
USDT_ERC20 = "0xc5fd6eb0a1fd15eb98cb18bf5f57457fea8e50a3"
TON_ADDRESS = "UQAYWHW0rKhY9MEZ6UR4gkkE5jJb9D"
CRYPTOBOT_LINK = "t.me/send?start=IVmn0QryS4jg"

DONATELLO_LINK = "https://donatello.to/Gromn"
DONATALERTS_LINK = "https://www.donationalerts.com/r/gromn"
FKWALLET_LINK = "https://fkwallet.io/registration?partner_code=FK3223"
FKWALLET_NUMBER = "F7202565872412476"

STATES_FILE = "states.json"
# ---------------------------------------------------

# ====== –¶–ï–ù–´ ======
STARS_PRICES = {
    "private": {"month": 200, "year": 500, "forever": 1000},
    "vip": {"month": 500, "year": 800, "forever": 1200},
}
USD_PRICES = {
    "private": {"month": 3, "year": 5, "forever": 10},
    "vip": {"month": 5, "year": 10, "forever": 15},
}

# ====== –ü–ê–ú–Ø–¢–¨ ======
pending_users = {}
admin_reply_state = {}

def load_states():
    global pending_users, admin_reply_state
    if os.path.exists(STATES_FILE):
        with open(STATES_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        pending_users = {int(k): v for k, v in data.get("pending_users", {}).items()}
        admin_reply_state = {int(k): v for k, v in data.get("admin_reply_state", {}).items()}

def save_states():
    data = {
        "pending_users": {str(k): v for k, v in pending_users.items()},
        "admin_reply_state": {str(k): v for k, v in admin_reply_state.items()}
    }
    with open(STATES_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

load_states()

# ====== FLASK KEEP ALIVE ======
app = Flask('')
@app.route('/')
def home(): return "Bot is running"
def run(): app.run(host='0.0.0.0', port=3000)
def keep_alive(): Thread(target=run, daemon=True).start()

# ====== –ö–õ–ê–í–ò–ê–¢–£–†–´ ======
def main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¶ Private", callback_data="menu_private")],
        [InlineKeyboardButton("üëë VIP Private", callback_data="menu_vip")],
        [InlineKeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ])

def duration_keyboard(prefix):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data=f"{prefix}_month")],
        [InlineKeyboardButton("–ì–æ–¥", callback_data=f"{prefix}_year")],
        [InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞", callback_data=f"{prefix}_forever")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def payment_methods_keyboard(prefix_pack):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚≠ê Stars", callback_data=f"{prefix_pack}_stars")],
        [InlineKeyboardButton("üíé TON", callback_data=f"{prefix_pack}_ton")],
        [InlineKeyboardButton("üíµ USDT", callback_data=f"{prefix_pack}_usdt")],
        [InlineKeyboardButton("ü§ñ CryptoBot", callback_data=f"{prefix_pack}_cryptobot")],
        [InlineKeyboardButton("üåç –£–∫—Ä–∞–∏–Ω–∞ / –†–æ—Å—Å–∏—è / –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", callback_data=f"{prefix_pack}_countries")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def usdt_network_keyboard(prefix_pack):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("USDT (TRC20)", callback_data=f"{prefix_pack}_usdt_trc")],
        [InlineKeyboardButton("USDT (ERC20)", callback_data=f"{prefix_pack}_usdt_erc")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{prefix_pack}")]
    ])

def countries_keyboard(prefix_pack):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞", callback_data=f"{prefix_pack}_ukraine")],
        [InlineKeyboardButton("üá∑üá∫ –†–æ—Å—Å–∏—è", callback_data=f"{prefix_pack}_russia")],
        [InlineKeyboardButton("üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", callback_data=f"{prefix_pack}_kazakhstan")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{prefix_pack}")]
    ])

# ====== –õ–û–ì–ò–ö–ê ======
def get_channel_link_for_pack(pack):
    return VIP_CHANNEL_LINK if pack.startswith("vip") else CHANNEL_LINK

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_photo(IMAGE_URL,
        caption=f"üì¢ –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_keyboard())

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data
    user = q.from_user
    await q.answer()

    if data == "back":
        await q.message.reply_photo(IMAGE_URL,
            caption=f"üì¢ –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {MAIN_CHANNEL}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=main_keyboard())
        return

    if data == "support":
        pending_users[user.id] = {"state": "support"}
        save_states()
        await q.message.reply_text("üõ† –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –∏–≥—Ä—ã, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –æ—Ç–≤–µ—Ç–∏—Ç.")
        return

    if data == "menu_private":
        await q.message.reply_text("üì¶ Private ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫:", reply_markup=duration_keyboard("private"))
        return
    if data == "menu_vip":
        await q.message.reply_text("üëë VIP Private ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫:", reply_markup=duration_keyboard("vip"))
        return

    m = re.match(r"^(private|vip)_(month|year|forever)$", data)
    if m:
        base, dur = m.group(1), m.group(2)
        usd = USD_PRICES[base][dur]
        await q.message.reply_text(f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: {usd}$\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_methods_keyboard(f"{base}_{dur}"))
        return

    # Stars
    if data.endswith("_stars"):
        pack = data.replace("_stars", "")
        base, dur = pack.split("_")
        stars = STARS_PRICES[base][dur]
        await context.bot.send_invoice(
            chat_id=user.id,
            title="–û–ø–ª–∞—Ç–∞ Stars",
            description="–ü–æ–∫—É–ø–∫–∞ –¥–æ—Å—Ç—É–ø–∞",
            payload=f"{pack}_stars",
            provider_token=STARS_PROVIDER_TOKEN,
            currency="XTR",
            prices=[LabeledPrice("–ü–æ–∫—É–ø–∫–∞ –¥–æ—Å—Ç—É–ø–∞", stars * 100)],
        )
        return

    # USDT
    if data.endswith("_usdt"):
        await q.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å USDT:", reply_markup=usdt_network_keyboard(data.replace("_usdt", "")))
        return
    if data.endswith("_usdt_trc"):
        await q.message.reply_text(f"üíµ –û—Ç–ø—Ä–∞–≤—å—Ç–µ 3$ USDT (TRC20)\n–ê–¥—Ä–µ—Å: `{USDT_TRC20}`\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª'.", parse_mode="Markdown")
        pending_users[user.id] = {"state": "awaiting_screenshot"}
        save_states()
        return
    if data.endswith("_usdt_erc"):
        await q.message.reply_text(f"üíµ –û—Ç–ø—Ä–∞–≤—å—Ç–µ 3$ USDT (ERC20)\n–ê–¥—Ä–µ—Å: `{USDT_ERC20}`\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª'.", parse_mode="Markdown")
        pending_users[user.id] = {"state": "awaiting_screenshot"}
        save_states()
        return

    # TON
    if data.endswith("_ton"):
        await q.message.reply_text(f"üíé –û—Ç–ø—Ä–∞–≤—å—Ç–µ 3$ –≤ TON –Ω–∞ –∞–¥—Ä–µ—Å:\n`{TON_ADDRESS}`\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª'.", parse_mode="Markdown")
        pending_users[user.id] = {"state": "awaiting_screenshot"}
        save_states()
        return

    # CryptoBot
    if data.endswith("_cryptobot"):
        await q.message.reply_text(f"ü§ñ –û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ CryptoBot:\n[{CRYPTOBOT_LINK}]({CRYPTOBOT_LINK})", parse_mode="Markdown")
        pending_users[user.id] = {"state": "awaiting_screenshot"}
        save_states()
        return

    # –°—Ç—Ä–∞–Ω—ã
    if data.endswith("_countries"):
        await q.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=countries_keyboard(data.replace("_countries", "")))
        return

    # –£–∫—Ä–∞–∏–Ω–∞
    if data.endswith("_ukraine"):
        await q.message.reply_text(f"üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞\n–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Donatello –∏–ª–∏ Donat Alerts:\n{DONATELLO_LINK}\n{DONATALERTS_LINK}\n\n–°—É–º–º–∞: 125‚Ç¥ / 3$\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª'.")
        pending_users[user.id] = {"state": "awaiting_screenshot"}
        save_states()
        return

    # –†–æ—Å—Å–∏—è
    if data.endswith("_russia"):
        await q.message.reply_text(
            f"üá∑üá∫ –†–æ—Å—Å–∏—è\n–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n1Ô∏è‚É£ Donat Alerts ‚Äî {DONATALERTS_LINK}\n"
            f"2Ô∏è‚É£ –ß–µ—Ä–µ–∑ FK Wallet ‚Äî [–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ]({FKWALLET_LINK})\n"
            f"–ó–∞–π–¥–∏—Ç–µ –≤ –∫–∞–±–∏–Ω–µ—Ç ‚Üí –ö–æ—à–µ–ª—ë–∫ ‚Üí –†—É–±–ª–∏ ‚Üí –í—ã–≤–æ–¥\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: `{FKWALLET_NUMBER}` –∏ —Å—É–º–º—É 280‚ÇΩ / 3$\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª'.",
            parse_mode="Markdown")
        pending_users[user.id] = {"state": "awaiting_screenshot"}
        save_states()
        return

    # –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
    if data.endswith("_kazakhstan"):
        await q.message.reply_text(f"üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω\n–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Donat Alerts:\n{DONATALERTS_LINK}\n–°—É–º–º–∞: 3$\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª'.")
        pending_users[user.id] = {"state": "awaiting_screenshot"}
        save_states()
        return

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if pending_users.get(user_id, {}).get("state") == "awaiting_screenshot":
        photo = update.message.photo[-1].file_id
        await context.bot.send_photo(ADMIN_ID, photo=photo, caption=f"üì∏ –ù–æ–≤—ã–π —Å–∫—Ä–∏–Ω –æ—Ç @{update.message.from_user.username or user_id}\n–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–í—ã–¥–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"approve_{user_id}")]]))
        await update.message.reply_text("‚úÖ –°–∫—Ä–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ 2 —á–∞—Å–æ–≤.")
        del pending_users[user_id]
        save_states()

async def admin_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data
    if data.startswith("approve_"):
        uid = int(data.split("_")[1])
        link = get_channel_link_for_pack("vip" if "vip" in data else "private")
        await context.bot.send_message(uid, f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø:\n{link}")
        await q.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        return

async def main():
    keep_alive()
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(admin_button, pattern=r"^approve_"))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
